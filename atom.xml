<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QIWIHUI</title>
  
  <subtitle>Don&#39;t be evil or greedy.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.qiwihui.com/"/>
  <updated>2018-09-06T16:08:21.387Z</updated>
  <id>https://blog.qiwihui.com/</id>
  
  <author>
    <name>qiwihui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spark 机器学习实战</title>
    <link href="https://blog.qiwihui.com/2018/09/03/spark-ml/"/>
    <id>https://blog.qiwihui.com/2018/09/03/spark-ml/</id>
    <published>2018-09-03T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>大纲：</p><ol><li><p>spark</p></li><li><p>机器学习算法</p><ul><li>kmeans 聚类</li><li>随机森林分类</li></ul></li><li><p>异常监测和分类</p></li></ol>]]></content>
    
    <summary type="html">
    
      Spark 机器学习实战
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="机器学习" scheme="https://blog.qiwihui.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Spark" scheme="https://blog.qiwihui.com/tags/Spark/"/>
    
      <category term="KMeans" scheme="https://blog.qiwihui.com/tags/KMeans/"/>
    
  </entry>
  
  <entry>
    <title>基于机器学习的垃圾短信过滤应用</title>
    <link href="https://blog.qiwihui.com/2018/08/27/ios-app-with-coreml/"/>
    <id>https://blog.qiwihui.com/2018/08/27/ios-app-with-coreml/</id>
    <published>2018-08-27T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>基于机器学习的垃圾短信过滤</p><ol><li><p>Scikit-Learn 短信过滤模型训练，</p><ul><li>模型，SVM<ul><li>判断是不是垃圾短信</li><li>判断短信类型</li></ul></li><li>数据，<a href="https://github.com/wandouqiang/RubbishMessage" target="_blank" rel="noopener">wandouqiang/RubbishMessage</a></li><li>训练</li><li>评估</li></ul></li><li><p>iOS CoreML介绍</p></li><li>使用 coremltools 将 Scikit-Learn 的模型转为 CoreML 的 mlmodel</li><li><p>iOS App功能实现，界面编写</p><ul><li>导入模型并使用</li><li>界面UI</li><li>自定义黑白名单：号码，关键词</li><li>提交辅助样本</li></ul></li><li><p>调试</p></li><li>App发布</li><li>优化模型大小，App大小及性能</li></ol>]]></content>
    
    <summary type="html">
    
      基于机器学习的垃圾短信过滤应用
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Machine Learning" scheme="https://blog.qiwihui.com/tags/Machine-Learning/"/>
    
      <category term="CoreML" scheme="https://blog.qiwihui.com/tags/CoreML/"/>
    
      <category term="iOS" scheme="https://blog.qiwihui.com/tags/iOS/"/>
    
      <category term="短信过滤" scheme="https://blog.qiwihui.com/tags/%E7%9F%AD%E4%BF%A1%E8%BF%87%E6%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>机器学习可视化编辑器的一些比较</title>
    <link href="https://blog.qiwihui.com/2018/08/23/machine-learning-studio-comparasion/"/>
    <id>https://blog.qiwihui.com/2018/08/23/machine-learning-studio-comparasion/</id>
    <published>2018-08-23T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>平台：</p><ol><li>Azure Machine Learning Studio</li><li>EasyML</li><li>BigQuant的量化投资平台</li><li>第四范式先知平台</li></ol><p>比较方向：</p><ol><li>方向：通用，专业；</li><li>使用体验：界面，操作流程（构建，训练，调优，部署）；</li><li>算法/数据的支持，底层硬件，分布式；</li><li>开发支持：语言，接口，扩展；</li><li>开源，商用性（一站式）；</li></ol><p>其他：</p><p>Weka, knime.org, 阿里云机器学习PAI 等等</p><p>数据分析傻瓜话？</p>]]></content>
    
    <summary type="html">
    
      机器学习可视化编辑器的一些比较
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Machine Learning" scheme="https://blog.qiwihui.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>生产级别 spark jobs 实战</title>
    <link href="https://blog.qiwihui.com/2018/08/16/spark-jobs/"/>
    <id>https://blog.qiwihui.com/2018/08/16/spark-jobs/</id>
    <published>2018-08-16T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>大纲：</p><ol><li><p>spark app 结构</p><ul><li>方便引入第三方包</li><li>打包任务为模块</li><li>spark streaming任务结构</li><li>本地调试</li><li>单元测试</li></ul></li><li><p>运行参数及优化</p></li><li><p>spark读取数据和输出</p><ul><li>mysql</li><li>elasticsearch</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      生产级别 spark jobs 实战
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="spark" scheme="https://blog.qiwihui.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>基于GitHub的几个hacking</title>
    <link href="https://blog.qiwihui.com/2018/08/14/hack-with-github/"/>
    <id>https://blog.qiwihui.com/2018/08/14/hack-with-github/</id>
    <published>2018-08-14T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>大纲：</p><ol><li>github pages：个人博客，gitbook书籍放置</li><li><p>github resume</p><ul><li>使用github保存简历</li><li>根据github生成个人简历，Github作为个人项目的体现</li></ul></li><li><p>github issue as comment: 使用github的issue作为博客评论</p></li><li>GitHub做图床</li><li>github做监控</li><li>GitHub敏感信息泄露：获取以及监测</li><li>Github zenhub：github作为项目管理以及功能增强</li><li>Github issue as GTD tool：比如 <a href="https://github.com/qiwihui/pocket_readings" target="_blank" rel="noopener">qiwihui/pocket_readings]</a></li></ol>]]></content>
    
    <summary type="html">
    
      使用GIhub提供的功能做一些有趣的事情
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="dotfiles" scheme="https://blog.qiwihui.com/tags/dotfiles/"/>
    
  </entry>
  
  <entry>
    <title>一个关于数学概率的问题</title>
    <link href="https://blog.qiwihui.com/2018/07/13/interview-question/"/>
    <id>https://blog.qiwihui.com/2018/07/13/interview-question/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目–百万英雄"><a href="#题目–百万英雄" class="headerlink" title="题目–百万英雄"></a>题目–百万英雄</h3><p>你参加一个游戏，在你面前有4张1000万支票，其中一张是真的。游戏开始，你选了一张，之后主持人在剩下<br>的3张里，选择一个展示出来，验证后发现是假的。</p><p>问题：请分情况理性分析，此时，你的参赛权的价格</p><ul><li>情况一：不允许修改之前的选择</li><li>情况二：有重新选择的权利</li></ul><p>回答：请用下面两种方法分别作答</p><ul><li>方式1（理论推导）：请给出理论推导和计算过程，情况二需说明如何行使权力；</li><li>方式2（编程模拟）：使用程序准确客观地模拟上述两种情况下，选手平均获得的奖金，得到参赛权的价格。</li></ul><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p>方式1（理论推导）</p><p>情况1: 不能重新选择时获奖的概率是1/4<br>情况2: 可以重新选择时是3/8<br>理由：</p><ol><li>不能重新选择时，你的选择不受主持人选择的影响，故为 1/4；</li><li>可以重新选择时，会受主持人的影响，是后验概率；第一步选择时，有四种可选，有 <code>1/4</code> 选择真实的，<code>3/4</code> 选择错误的，主持人的选择在剩下的三个中排除了一个错误的，剩两个。选择真实后重选，再次选中的概率为0，故为 <code>1/4 * 0 = 0</code>；选择假的后重选，选中概率为1/2，故为 <code>3/4 * 1/2 = 3/8</code>；总的选中真的概率为 <code>0 + 3/8 = 3/8</code>。</li></ol><p>方式2（编程模拟）:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span>:</span></span><br><span class="line">    <span class="string">"""英雄</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.num = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        self.num = random.choice(nums)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Host</span>:</span></span><br><span class="line">    <span class="string">"""主持人</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.num = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self, nums, bnum)</span>:</span></span><br><span class="line">        <span class="string">"""主持人</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.num = random.choice(nums)</span><br><span class="line">        <span class="keyword">while</span> bnum == self.num:</span><br><span class="line">            self.num = random.choice(nums)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MH</span>:</span></span><br><span class="line">    <span class="string">"""游戏过程</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.nums = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">        self.host = Host()</span><br><span class="line">        self.hero = Hero()</span><br><span class="line">        self.bnum = random.randint(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reward</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""奖励</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.hero.num == self.bnum:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play_without_regret</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""不允许修改之前的选择</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.hero.pick(self.nums)</span><br><span class="line">        self.nums.remove(self.hero.num)</span><br><span class="line">        self.host.pick(self.nums, self.bnum)</span><br><span class="line">        <span class="keyword">return</span> self.reward()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play_with_regret</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""有重新选择的权利</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.hero.pick(self.nums)</span><br><span class="line">        self.nums.remove(self.hero.num)</span><br><span class="line">        self.host.pick(self.nums, self.bnum)</span><br><span class="line">        self.nums.remove(self.host.num)</span><br><span class="line">        self.hero.pick(self.nums)</span><br><span class="line">        <span class="keyword">return</span> self.reward()</span><br><span class="line"></span><br><span class="line">sum1 = <span class="number">0</span></span><br><span class="line">sum2 = <span class="number">0</span></span><br><span class="line"><span class="comment"># 模拟10000次</span></span><br><span class="line">times = <span class="number">10000</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(times):</span><br><span class="line">    sum1 += MH().play_without_regret()</span><br><span class="line">    sum2 += MH().play_with_regret()</span><br><span class="line">avg1 = sum1/float(times)</span><br><span class="line">avg2 = sum2/float(times)</span><br><span class="line">print(avg1)</span><br><span class="line">print(avg2)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt; python bh.py</span><br><span class="line">24.81</span><br><span class="line">37.12</span><br></pre></td></tr></table></figure><p>与理论计算一致</p><h3 id="引申"><a href="#引申" class="headerlink" title="引申"></a>引申</h3><p>三门问题（Monty Hall Problem）</p>]]></content>
    
    <summary type="html">
    
      一个关于数学概率的问题
    
    </summary>
    
      <category term="数学" scheme="https://blog.qiwihui.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="概率" scheme="https://blog.qiwihui.com/tags/%E6%A6%82%E7%8E%87/"/>
    
      <category term="三门问题" scheme="https://blog.qiwihui.com/tags/%E4%B8%89%E9%97%A8%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Django/Python项目代码保护</title>
    <link href="https://blog.qiwihui.com/2018/07/10/python-django-protection/"/>
    <id>https://blog.qiwihui.com/2018/07/10/python-django-protection/</id>
    <published>2018-07-10T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<ol><li>编译成pyc；</li><li>修改python编译器，编译成pyc；</li><li>使用Cython静态编译；</li><li><strong>开源，提供服务</strong>；</li></ol>]]></content>
    
    <summary type="html">
    
      Django/Python项目代码保护
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://blog.qiwihui.com/tags/Python/"/>
    
      <category term="Django" scheme="https://blog.qiwihui.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins配置使用Docker自动编译</title>
    <link href="https://blog.qiwihui.com/2018/06/23/jenkins/"/>
    <id>https://blog.qiwihui.com/2018/06/23/jenkins/</id>
    <published>2018-06-23T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins配置使用Docker自动编译</p><p>大纲：</p><ol><li>jenkins介绍，以及相应的好处；</li><li>配置jenkins：<ul><li>jenkins docker本身配置；</li><li>配置jenkins使用docker；</li><li>配置jenkins多worker；</li></ul></li><li>项目编译构建docker化；</li><li>配置项目：<ul><li>项目权限；</li><li>触发：github触发，定时触发；</li><li>编译部署过程，分情况；</li><li>完成之后：发邮件，修改github状态</li></ul></li><li>总结注意点</li></ol>]]></content>
    
    <summary type="html">
    
      Jenkins配置使用Docker自动编译
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Docker" scheme="https://blog.qiwihui.com/tags/Docker/"/>
    
      <category term="Jenkins" scheme="https://blog.qiwihui.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>使用 Travis CI 自动更新博客</title>
    <link href="https://blog.qiwihui.com/2018/05/18/deploy-github-pages-with-travis-ci/"/>
    <id>https://blog.qiwihui.com/2018/05/18/deploy-github-pages-with-travis-ci/</id>
    <published>2018-05-18T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>写好博客之后，部署总会占去一段时间：编译、部署、推送和检查。手动部署多了也就烦了，一则容易出错，<br>比如把 master 分支用 gh-pages 分支覆盖了，二则劳动是重复的，重复的劳动就应该自动化去解决。</p><h2 id="最早的想法"><a href="#最早的想法" class="headerlink" title="最早的想法"></a>最早的想法</h2><p>使用 GitHub Webhooks 实现自动部署，这就需要有一台服务器，在服务器上启动服务接受 Github 的<br>回调，然后拉取代码，编译，将编译后的代码要么部署在同一台服务器上，要么推送到代码 gh-pages 分<br>支上。前者额外需要编写服务，配置博客 Nginx，可能还需要配置 HTTPS，以及对服务器进行加固，总归<br>就是需要额外的更多东西来支持。所以还是觉得用已经存在的线上自动化服务方便一些（其实就是懒）。</p><h2 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h2><p>持续集成（Continuous Integration，CI）的 SaaS 服务，好处不言而喻。</p><h2 id="配置-Travis"><a href="#配置-Travis" class="headerlink" title="配置 Travis"></a>配置 Travis</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem install travis</span><br><span class="line">travis login</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">6.9</span><span class="number">.0</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">submodule</span> <span class="string">update</span> <span class="bullet">--init</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="bullet">-g</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="bullet">--deploy</span> <span class="bullet">--quiet</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">master</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  directories:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">node_modules</span></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line"><span class="attr">  email:</span></span><br><span class="line"><span class="attr">    recipients:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">qwh005007@gmail.com</span></span><br><span class="line"><span class="attr">    on_success:</span> <span class="string">change</span></span><br><span class="line"><span class="attr">    on_failure:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><h2 id="使用-Travis-自动部署"><a href="#使用-Travis-自动部署" class="headerlink" title="使用 Travis 自动部署"></a>使用 Travis 自动部署</h2><p><code>ERROR Deployer not found: git</code></p><p><a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a></p><p><code>npm install hexo-deployer-git --save</code></p><h2 id="配置认证"><a href="#配置认证" class="headerlink" title="配置认证"></a>配置认证</h2><p>往 Github 仓库中提交代码是需要认证的，不管是用用户密码，Access Token还是SSH key。一种方法是<br>直接将认证写在 <code>.config.yml</code> 中，不是说不行，是太年轻。好在 Travis CI 不仅支持<a href="https://docs.travis-ci.com/user/encrypting-files/" target="_blank" rel="noopener">加密文件</a>，<br>也支持<a href="https://docs.travis-ci.com/user/encryption-keys/" target="_blank" rel="noopener">加密 Keys</a>，这就为认证这一块<br>扫清了道路，我决定使用 OAuth 认证 Git 来提交代码到仓库中。</p><p>操作步骤：</p><pre><code>1. 生成 Github Personal Access Token；2. 使用 Travis CI 命令行加密 Personal Access Token；    `travis encrypt GH_TOKEN=&lt;token&gt; --add`3. 在 `.travis.yml` 中添加配置<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">push.default</span> <span class="string">matching</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.name</span> <span class="string">"qiwihui via Travis CI"</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.email</span> <span class="string">"qwh005007@gmail.com"</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">sed</span> <span class="bullet">-i''</span> <span class="string">"/^ *repo/s~github\.com~$&#123;GH_TOKEN&#125;@github.com~"</span> <span class="string">_config.yml</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">  global:</span></span><br><span class="line"><span class="attr">  - secure:</span> <span class="string">IYXTVHItgbEn...</span></span><br></pre></td></tr></table></figure></code></pre><h2 id="在-Travsi-CI-中配置项目"><a href="#在-Travsi-CI-中配置项目" class="headerlink" title="在 Travsi CI 中配置项目"></a>在 Travsi CI 中配置项目</h2><ol><li>Publicizing or hiding organization membership</li></ol><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><ol><li>qiwihui.github.io/qiwihui/ =&gt; blog.qiwihui.com</li><li>Enforce https</li></ol><p>胜利完成!</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://notes.iissnan.com/2016/publishing-github-pages-with-travis-ci/" target="_blank" rel="noopener">使用 Travis CI 自动更新 GitHub Pages</a></li><li><a href="http://lotabout.me/2016/Hexo-Auto-Deploy-to-Github/" target="_blank" rel="noopener">Hexo 自动部署到 Github</a></li><li><a href="https://blog.github.com/2012-09-21-easier-builds-and-deployments-using-git-over-https-and-oauth/" target="_blank" rel="noopener">Easier builds and deployments using Git over HTTPS and OAuth</a></li><li><a href="https://help.github.com/articles/publicizing-or-hiding-organization-membership/" target="_blank" rel="noopener">Publicizing or hiding organization membership</a></li></ul>]]></content>
    
    <summary type="html">
    
      Travis CI 自动检测代码变化，拉取，编译博客并部署到 GitHub Pages。
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Github" scheme="https://blog.qiwihui.com/tags/Github/"/>
    
      <category term="Travis CI" scheme="https://blog.qiwihui.com/tags/Travis-CI/"/>
    
      <category term="Hexo" scheme="https://blog.qiwihui.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>用Homebrew 安装 v2ray 以及 Homebrew-cask 安装 V2RayX</title>
    <link href="https://blog.qiwihui.com/2018/05/15/install-v2ray-v2rayx-using-homebrew/"/>
    <id>https://blog.qiwihui.com/2018/05/15/install-v2ray-v2rayx-using-homebrew/</id>
    <published>2018-05-15T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始转向使用 v2ray 作为主要的翻墙工具，在 macOS 上安装和使用都需要下载编译好的软件包然后解包使用，不是很方便，联系到 macOS 下常用的包管理 Homebrew，何不自己提交一个？<br><a id="more"></a></p><h3 id="v2ray及V2RayX是啥？"><a href="#v2ray及V2RayX是啥？" class="headerlink" title="v2ray及V2RayX是啥？"></a>v2ray及V2RayX是啥？</h3><blockquote><p>V2Ray 是一个模块化的代理软件包，它的目标是提供常用的代理软件模块，简化网络代理软件的开发。</p></blockquote><p>简单说 <a href="https://github.com/v2ray/v2ray-core" target="_blank" rel="noopener">v2ray</a> 就是翻墙代理软件（但不止于软件，是一个平台）。<a href="https://github.com/Cenmrev/V2RayX" target="_blank" rel="noopener">V2RayX</a> 就是 macOS 下一个简单的 v2ray 的GUI程序。</p><h3 id="Homebrew呢？"><a href="#Homebrew呢？" class="headerlink" title="Homebrew呢？"></a>Homebrew呢？</h3><p>macOS上强大的包管理工具，类似于Ubuntu的apt。</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p>使用，比如下载 <code>curl</code>:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install curl</span><br></pre></td></tr></table></figure><h3 id="安装v2ray"><a href="#安装v2ray" class="headerlink" title="安装v2ray"></a>安装v2ray</h3><p>不知道为啥，官方的Homebrew Formula不接受 v2ray 源，所以只能自己写了，见 <a href="https://github.com/qiwihui/homebrew-v2ray" target="_blank" rel="noopener">qiwihui/homebrew-v2ray</a>。</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew tap qiwihui/v2ray</span><br><span class="line">brew install v2ray-core</span><br></pre></td></tr></table></figure><p>使用：</p><p>首先，需要配置 <code>/usr/local/etc//v2ray.config.json</code>；<br>其次，配置v2ray登录时自动开启：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew services start v2ray-core</span><br></pre></td></tr></table></figure><p>或者，可以手动运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">v2ray -config=/usr/<span class="built_in">local</span>/etc//v2ray.config.json</span><br></pre></td></tr></table></figure><h3 id="安装V2RayX"><a href="#安装V2RayX" class="headerlink" title="安装V2RayX"></a>安装V2RayX</h3><p>我向官方 <a href="https://caskroom.github.io/" target="_blank" rel="noopener">Homebrew-Cask</a> 提交了一个Formula，可以直接使用如下命令安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew cask install v2rayx</span><br></pre></td></tr></table></figure><p>不过GUI毕竟不能覆盖命令行的全部功能，所以能用命令行v2ray的话，就尽量不使用V2RayX吧。</p>]]></content>
    
    <summary type="html">
    
      v2ray和v2rayx安装
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="翻墙" scheme="https://blog.qiwihui.com/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>极路由免开发者权限开启SSH</title>
    <link href="https://blog.qiwihui.com/2018/03/09/ssh-hiwifi-without-developer-mode/"/>
    <id>https://blog.qiwihui.com/2018/03/09/ssh-hiwifi-without-developer-mode/</id>
    <published>2018-03-09T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>大纲:</p><ol><li>正常流程申请开发者</li></ol><p>注册 -&gt; 申请 -&gt; 安装插件 -&gt; 开通ssh权限</p><p>缺点：弃保修</p><ol start="2"><li>使用定时重播插件提供的自定义规则启动dropbear</li></ol><p>参见： <a href="https://www.okgo.xyz/forum.php?mod=viewthread&amp;tid=45" target="_blank" rel="noopener">https://www.okgo.xyz/forum.php?mod=viewthread&amp;tid=45</a></p><p>3. </p>]]></content>
    
    <summary type="html">
    
      免开发者权限，不弃保
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hiwifi" scheme="https://blog.qiwihui.com/tags/hiwifi/"/>
    
  </entry>
  
  <entry>
    <title>头脑王者以及使用mitmproxy</title>
    <link href="https://blog.qiwihui.com/2018/03/03/tnwz_and_mitmproxy/"/>
    <id>https://blog.qiwihui.com/2018/03/03/tnwz_and_mitmproxy/</id>
    <published>2018-03-03T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>大纲：</p><p>项目地址：<a href="https://github.com/qiwihui/tnwz" target="_blank" rel="noopener">qiwihui/tnwz</a></p><ol><li><p>如何为找接口请求</p><ul><li>获取所有接口及对应接口参数，加密方式；</li><li>确定游戏流程；</li></ul></li><li><p>精准答题</p><ul><li>利用对战抓取题库；</li><li>答题匹配</li></ul></li><li><p>自动答题</p><ul><li>利用mitmproxy修改答题请求</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      头脑王者开房答题抓题库，答题自动改答案
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mitmproxy" scheme="https://blog.qiwihui.com/tags/mitmproxy/"/>
    
  </entry>
  
  <entry>
    <title>谷歌上线基于TensorFlow的机器学习速成课程中文版</title>
    <link href="https://blog.qiwihui.com/2018/03/01/google-machine-learning-crash-course/"/>
    <id>https://blog.qiwihui.com/2018/03/01/google-machine-learning-crash-course/</id>
    <published>2018-03-01T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>谷歌重回中国，在北京组建人工智能、机器学习团队，昨天（3月1如）又上线了机器学习速成课程的中文版，免费提供机器学习课程指导，这个课程最大的特点就是有完整的中文资料、中文语音和视频字幕以及相应的中文测试题，非常适合初学者，可谓良心。顺便提一句，整个视频的配音都是使用机器学习技术生成的。<br><a id="more"></a></p><p>课程地址：<a href="https://developers.google.cn/machine-learning/crash-course/" target="_blank" rel="noopener">https://developers.google.cn/machine-learning/crash-course/</a></p><p><img src="https://steemitimages.com/DQmVVfoYZa3zTwgvaePCaeJSTeAK7AYgcX3L1yXKPgrRQEt/Screen%20Shot%202018-03-02%20at%202.51.05%20PM.png" alt="Screen Shot 2018-03-02 at 2.51.05 PM.png"></p><h3 id="课程详情"><a href="#课程详情" class="headerlink" title="课程详情"></a>课程详情</h3><p>以下是整个课程的目录：</p><p>简介</p><ul><li>目标</li><li>前提条件和准备工作</li></ul><p>机器学习概念</p><ul><li>框架处理（15 分钟）机器学习基础属术语</li><li>深入了解机器学习（20 分钟）线性回归，训练与损失</li><li>降低损失（60 分钟）两种梯度下降方法，及对学习速率的实验</li><li>使用 TF 的基本步骤（60 分钟）</li><li>泛化（15 分钟）什么是泛化，什么是过拟合，怎样评价一个模型的好坏</li><li>训练及测试集（25 分钟）把数据集分成训练集和测试集</li><li>验证（40 分钟）验证集</li><li>表示法（65 分钟）特征工程</li><li>特征组合（70 分钟）明白什么是特征组合，怎么用 TensorFlow 实现</li><li>正则化：简单性（40 分钟）L2 正则化，学习复杂化和普遍化的取舍</li><li>逻辑回归（20 分钟）理解逻辑回归，探索损失函数和正则化</li><li>分类（90 分钟）评估一个逻辑回归模型的正确性和精度</li><li>正则化：稀松性（45 分钟）L1 于 L2 正则化</li><li>神经网络介绍（40 分钟）隐藏层，激活函数</li><li>训练神经网络（40 分钟）反向传播</li><li>多种类神经网络（50 分钟）理解多类分类器问题，Softmax，在 TensorFlow 中实现 Softmax 结果。</li><li>嵌入（80 分钟）什么是嵌入，协同过滤，嵌套</li></ul><p>机器学习工程</p><ul><li>生产环境机器学习系统（3 分钟）</li><li>静态训练与动态训练（7 分钟）静态和动态训练的优缺点</li><li>静态推断与动态推断（7 分钟）静态和动态推断的优缺点</li><li>数据依赖关系（14 分钟）理解机器学习中的数据依赖</li></ul><p>机器学习现实世界应用示例</p><ul><li>癌症预测（5 分钟）</li><li>18 世纪文献（5 分钟）</li><li>现实世界应用准则（2 分钟）</li></ul><p>结论</p><ul><li>后续步骤：推荐了机器学习和 TensorFlow 的学习资料，以及 Kaggle 比赛。</li></ul><p>同时，Google还提供了大量的练习题和机器学习的术语库，极大方便了学习巩固。</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/34129033" target="_blank" rel="noopener">谷歌今日上线基于TensorFlow的机器学习速成课程（免费中文版）</a></li></ul>]]></content>
    
    <summary type="html">
    
      Google Machine Learning Crash Course
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="机器学习" scheme="https://blog.qiwihui.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>玩微信跳一跳小游戏的姿势</title>
    <link href="https://blog.qiwihui.com/2018/02/28/ways-to-wechat-jump/"/>
    <id>https://blog.qiwihui.com/2018/02/28/ways-to-wechat-jump/</id>
    <published>2018-02-28T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>微信跳一跳小程序火了，来看一看玩耍的正确姿势。<br><a id="more"></a></p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>距离判断 + 按压模拟</p><h2 id="距离判断"><a href="#距离判断" class="headerlink" title="距离判断"></a>距离判断</h2><p>距离</p><ol><li><p>手动判断点击/像素点判断，自动点击</p><ul><li><a href="https://zhuanlan.zhihu.com/p/32452473" target="_blank" rel="noopener">教你用Python来玩微信跳一跳</a>，项目地址：<a href="https://github.com/wangshub/wechat_jump_game" target="_blank" rel="noopener">wangshub/wechat_jump_game</a></li></ul></li><li><p>OpenCV 图像分析</p><ul><li><a href="https://zhuanlan.zhihu.com/p/32502071" target="_blank" rel="noopener">用Python+Opencv让电脑帮你玩微信跳一跳</a>，项目地址：<a href="https://github.com/moneyDboat/wechat_jump_jump" target="_blank" rel="noopener">moneyDboat/wechat_jump_jump</a></li></ul></li></ol><p>按压时间计算</p><ol><li>手机屏幕系数</li><li>基于二次函数拟合计算:<ul><li><a href="https://i-meto.com/wechat-jump-game/" target="_blank" rel="noopener">以程序员的角度玩微信跳一跳</a>，项目地址：<a href="https://github.com/metowolf/JumpJumpHelper" target="_blank" rel="noopener">metowolf/JumpJumpHelper</a></li><li><a href="https://github.com/wangshub/wechat_jump_game/issues/744" target="_blank" rel="noopener">https://github.com/wangshub/wechat_jump_game/issues/744</a></li><li><a href="https://github.com/wangshub/wechat_jump_game/pull/841" target="_blank" rel="noopener">https://github.com/wangshub/wechat_jump_game/pull/841</a></li></ul></li></ol><p>综合</p><ol><li>机器学习和神经网络<ul><li><a href="http://blog.csdn.net/zhanys_7/article/details/78940763" target="_blank" rel="noopener">用TensorFlow做一个玩微信跳一跳的AI</a>，项目地址：<a href="https://github.com/zhanyongsheng/LetsJump" target="_blank" rel="noopener">zhanyongsheng/LetsJump</a></li><li><a href="https://zhuanlan.zhihu.com/p/32636329" target="_blank" rel="noopener">AI玩微信跳一跳的正确姿势–跳一跳Auto-Jump算法详解</a>，项目地址：<a href="https://github.com/Prinsphield/Wechat_AutoJump" target="_blank" rel="noopener">Prinsphield/Wechat_AutoJump</a></li><li><a href="https://xianzhi.aliyun.com/forum/topic/1881" target="_blank" rel="noopener">AlphaJump - 如何用机器学习去玩微信小游戏跳一跳(一)</a>；<a href="https://xianzhi.aliyun.com/forum/topic/1934" target="_blank" rel="noopener">AlphaJump - 如何用机器学习去玩微信小游戏跳一跳(二)</a>，项目地址：<a href="https://github.com/wstart/wechat_AlphaJump" target="_blank" rel="noopener">wstart/wechat_AlphaJump</a></li></ul></li></ol><h2 id="按压模拟"><a href="#按压模拟" class="headerlink" title="按压模拟"></a>按压模拟</h2><ol><li>adb/wda 指令</li><li>机械臂模拟手指点击</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://wetest.qq.com/lab/view/364.html" target="_blank" rel="noopener">揭密微信跳一跳小游戏那些外挂</a></li></ul>]]></content>
    
    <summary type="html">
    
      玩微信跳一跳小游戏的一些姿势
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Wechat" scheme="https://blog.qiwihui.com/tags/Wechat/"/>
    
  </entry>
  
  <entry>
    <title>2017年总结与回望</title>
    <link href="https://blog.qiwihui.com/2018/02/27/summary-2017/"/>
    <id>https://blog.qiwihui.com/2018/02/27/summary-2017/</id>
    <published>2018-02-27T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>工作:</p><ul><li>安全方向；</li><li>大数据；</li><li>机器学习初学：线性回归，神经网路，SVM；</li><li>深度学习入门</li><li>语言：Python, iOS, Go</li><li>阅读/读书：非技术的书阅读较少，五本左右</li><li>知识整理系统：RSS, PinBoard -&gt; Pocket -&gt; IFTTT -&gt; Evernote记录，github分析</li><li>开源项目，维护乏力，hiwifi-ss</li><li><p>我的专长：</p><ul><li>数学基础：机器学习和深度学习有天然的优势</li><li>我的弱点：对于做事情的热度不够持久=&gt; 利用这点，每种学一段，交替进行</li><li>情绪管理：无法控制自己的情绪对于自己工作的影响，一度不知道怎么控制自己</li></ul></li></ul><p>目标：</p><ul><li>网路自由化和安全化：RSS，翻墙，去中心化运动，网络中立</li></ul><p>产品和实现</p><ol><li>机器学习和深度学习</li><li>Python</li><li>iOS, macOS开发</li><li>架构</li><li>生活：自我认知，恋爱，惰性</li><li>情绪影响工作</li></ol>]]></content>
    
    <summary type="html">
    
      回顾和展望2017年
    
    </summary>
    
      <category term="生活" scheme="https://blog.qiwihui.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="总结" scheme="https://blog.qiwihui.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Nginx服务器设置HTTP/2</title>
    <link href="https://blog.qiwihui.com/2017/02/17/setting-up-http2-on-nginx/"/>
    <id>https://blog.qiwihui.com/2017/02/17/setting-up-http2-on-nginx/</id>
    <published>2017-02-17T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>我的博客已经支持了 HTTP/2, 在此将介绍如何在 Nginx 上设置 HTTP/2 及相关注意事项(坑)。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>HTTP/2 安装需要以下前提：</p><ul><li>Nginx 版本在1.9.5以上</li><li>OpenSSL 版本在 1.0.2g 以上（支持 ALPN）</li></ul><p>不同 Linux 系统对于 <code>ALPN</code> 和 <code>NPN</code> 的支持可以参见下表</p><table><thead><tr><th>Operating System</th><th>OpenSSL Version</th><th>ALPN and NPN Support</th></tr></thead><tbody><tr><td>CentOS/Oracle Linux/RHEL 5.10+</td><td>0.9.8e</td><td>Neither</td></tr><tr><td>CentOS/Oracle Linux/RHEL 6.5+, 7.0+</td><td>1.0.1e</td><td>NPN</td></tr><tr><td>Ubuntu 12.04 LTS</td><td>1.0.1</td><td>NPN</td></tr><tr><td>Ubuntu 14.04 LTS</td><td>1.0.1f</td><td>NPN</td></tr><tr><td>Ubuntu 16.04 LTS</td><td>1.0.2g</td><td>ALPN and NPN</td></tr><tr><td>Debian 7.0</td><td>1.0.1e</td><td>NPN</td></tr><tr><td>Debian 8.0</td><td>1.0.1k</td><td>NPN</td></tr></tbody></table><p>所以要么升级使用带有 OpenSSL 1.0.2 的 Ubuntu 16.04 LTS，要么从头编译 Nginx.</p><p>我的服务器系统是 Debian 7, OpenSSL 版本是1.0.1t, 所以需要重新编译 Nginx 和 OpenSSL.</p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="安装-OpenSSL"><a href="#安装-OpenSSL" class="headerlink" title="安装 OpenSSL"></a>安装 OpenSSL</h3><p>下载并安装 OpenSSL:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd ~</span></span><br><span class="line"><span class="comment"># wget http://www.openssl.org/source/openssl-1.1.0e.tar.gz</span></span><br><span class="line"><span class="comment"># tar -zxf openssl-1.1.0e.tar.gz</span></span><br><span class="line"><span class="comment"># cd openssl-1.1.0e</span></span><br><span class="line"><span class="comment"># ./configure</span></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line"><span class="comment"># sudo make install</span></span><br></pre></td></tr></table></figure><p>使用 <code>openssl version</code> 来查看安装好的 OpenSSL 的版本。</p><h3 id="其他-Nginx-编译需要的环境"><a href="#其他-Nginx-编译需要的环境" class="headerlink" title="其他 Nginx 编译需要的环境"></a>其他 Nginx 编译需要的环境</h3><p>需要编译 <code>PCRE</code> 库和 <code>zlib</code> 库[]：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.40.tar.gz</span></span><br><span class="line"><span class="comment"># tar -zxf pcre-8.40.tar.gz</span></span><br><span class="line"><span class="comment"># cd pcre-8.40</span></span><br><span class="line"><span class="comment"># ./configure</span></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line"><span class="comment"># sudo make install</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget http://zlib.net/zlib-1.2.11.tar.gz</span></span><br><span class="line"><span class="comment"># tar -zxf zlib-1.2.11.tar.gz</span></span><br><span class="line"><span class="comment"># cd zlib-1.2.11</span></span><br><span class="line"><span class="comment"># ./configure</span></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line"><span class="comment"># sudo make install</span></span><br></pre></td></tr></table></figure><h3 id="编译-Nginx"><a href="#编译-Nginx" class="headerlink" title="编译 Nginx"></a>编译 Nginx</h3><p>首先，下载最新的 nginx，我使用 1.10.3.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget -c http://nginx.org/download/nginx-1.10.3.tar.gz</span><br><span class="line">tar xzvf nginx-1.10.3.tar.gzcd nginx-1.10.3</span><br></pre></td></tr></table></figure><p>其实，获取 Nginx 配置参数，使新版 Nginx 和之前的配置一样</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx -V</span></span><br><span class="line"></span><br><span class="line">nginx version: nginx/1.9.6</span><br><span class="line">built by gcc 4.7.2 (Debian 4.7.2-5) </span><br><span class="line">built with OpenSSL 1.0.1t  3 May 2016</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-file-aio --with-threads --with-ipv6 --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-cc-opt=<span class="string">'-g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'</span> --with-ld-opt=<span class="string">'-Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'</span></span><br></pre></td></tr></table></figure><p>上述配置用已经有 <code>--with-http_v2_module</code> 选项了，还需要在上述配置参数后面加上 <code>--with-openssl=/path/to/your/openssl-1.1.0e</code> 指向新版本的 OpenSSL 文件夹</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-file-aio --with-threads --with-ipv6 --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-cc-opt=<span class="string">'-g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'</span> --with-ld-opt=<span class="string">'-Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'</span> --with-openssl=/home/qiwihui/openssl-1.1.0e</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">可以看到大致输出为</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">Configuration summary</span><br><span class="line">  + using threads</span><br><span class="line">  + using system PCRE library</span><br><span class="line">  + using OpenSSL library: /home/qiwihui/openssl-1.1.0e</span><br><span class="line">  + md5: using OpenSSL library</span><br><span class="line">  + sha1: using OpenSSL library</span><br><span class="line">  + using system zlib library</span><br><span class="line"></span><br><span class="line">  nginx path prefix: <span class="string">"/etc/nginx"</span></span><br><span class="line">  nginx binary file: <span class="string">"/usr/sbin/nginx"</span></span><br><span class="line">  nginx modules path: <span class="string">"/usr/lib/nginx/modules"</span></span><br><span class="line">  nginx configuration prefix: <span class="string">"/etc/nginx"</span></span><br><span class="line">  nginx configuration file: <span class="string">"/etc/nginx/nginx.conf"</span></span><br><span class="line">  nginx pid file: <span class="string">"/var/run/nginx.pid"</span></span><br><span class="line">  nginx error <span class="built_in">log</span> file: <span class="string">"/var/log/nginx/error.log"</span></span><br><span class="line">  nginx http access <span class="built_in">log</span> file: <span class="string">"/var/log/nginx/access.log"</span></span><br><span class="line">  nginx http client request body temporary files: <span class="string">"/var/cache/nginx/client_temp"</span></span><br><span class="line">  nginx http proxy temporary files: <span class="string">"/var/cache/nginx/proxy_temp"</span></span><br><span class="line">  nginx http fastcgi temporary files: <span class="string">"/var/cache/nginx/fastcgi_temp"</span></span><br><span class="line">  nginx http uwsgi temporary files: <span class="string">"/var/cache/nginx/uwsgi_temp"</span></span><br><span class="line">  nginx http scgi temporary files: <span class="string">"/var/cache/nginx/scgi_temp"</span></span><br></pre></td></tr></table></figure><p>最后，编译并安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># make</span></span><br><span class="line"><span class="comment"># sudo make install</span></span><br></pre></td></tr></table></figure><p>之后就可以看到已经安装好了新版 Nginx了。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="配置-HTTPS"><a href="#配置-HTTPS" class="headerlink" title="配置 HTTPS"></a>配置 HTTPS</h4><p>请参考之前博客 <a href="https://blog.qiwihui.com/2016/04/10/enable-https/">使用免费的let’s encrypt证书为网站开启https</a></p><h4 id="开启-http-2"><a href="#开启-http-2" class="headerlink" title="开启 http/2"></a>开启 http/2</h4><p>第一步完成后就设置好了一个 HTTPS 的网站了，在此基础之上开始 HTTP/2。首先，开启 HTTP/2：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">listen 443 ssl http2 default_server;</span><br></pre></td></tr></table></figure><p>其次，去除HTTP/2不支持的旧的不安全的密码套件[5]:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line">ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;</span><br></pre></td></tr></table></figure><p>最后，检查配置并重启 Nginx:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx -t</span></span><br><span class="line"></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo /etc/init.d/nginx restart</span></span><br></pre></td></tr></table></figure><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>至此，不出问题的话你的服务器已经开始支持 HTTP/2 了，可以使用 <a href="https://tools.keycdn.com/http2-test" target="_blank" rel="noopener">HTTP/2 Test</a> 来检测是否支持了 HTTP/2</p><p><img src="/media/files/2017/02/19-qiwihui-com-http2.png" alt=""></p><p>其中，对 <code>ALPN</code> 的支持可以使用 OpenSSL 来检测：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> | openssl s_client -alpn h2 -connect qiwihui.com:443 | grep ALPN</span><br></pre></td></tr></table></figure><p>如果输出中包含 <code>ALPN protocol: h2</code>，说明服务端支持 <code>ALPN</code>，如果输出中包含 <code>No ALPN negotiated</code>，说明服务端不支持 <code>ALPN</code>。</p><p>同时，在 Chrome 的开发者工具中也可以看到协议的版本</p><p><img src="/media/files/2017/02/19-qiwihui-com-chrome-http2.png" alt=""></p><p>同时还可以对 HTTP/2 进行优化，请参见[6]，不赘述了。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>附录一份 Nginx 的 http/2 简单配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl http2 default_server;</span><br><span class="line">        listen [::]:443 ssl http2 default_server;</span><br><span class="line"></span><br><span class="line">        server_name example.com www.example.com; </span><br><span class="line"></span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_certificate     /etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class="line">        ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class="line"></span><br><span class="line">        ssl_dhparam /path/to/your/dhparam.pem;</span><br><span class="line">        ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;</span><br><span class="line"></span><br><span class="line">        ssl_prefer_server_ciphers  on;</span><br><span class="line">        add_header Strict-Transport-Security <span class="string">"max-age=31536000; includeSubdomains;"</span>;</span><br><span class="line">        ssl_session_cache shared:SSL:5m;</span><br><span class="line">        ssl_session_timeout 1h;</span><br><span class="line">        </span><br><span class="line">        root /path/to/your/folder/;</span><br><span class="line">        index index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line">    server_name example.com www.example.com;</span><br><span class="line">    <span class="built_in">return</span> 301 https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1]. <a href="https://www.nginx.com/blog/supporting-http2-google-chrome-users/" target="_blank" rel="noopener">Supporting HTTP/2 for Google Chrome Users</a><br>[2]. <a href="https://imququ.com/post/enable-alpn-asap.html" target="_blank" rel="noopener">为什么我们应该尽快支持 ALPN？</a><br>[3]. <a href="https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/" target="_blank" rel="noopener">Nginx官方教程 INSTALLING NGINX OPEN SOURCE</a><br>[4]. <a href="http://serverfault.com/a/733556/296724" target="_blank" rel="noopener">serverfault问题: Nginx configured with http2 doesn’t deliver HTTP/2</a><br>[5]. <a href="https://http2.github.io/http2-spec/#BadCipherSuites" target="_blank" rel="noopener">TLS 1.2 Cipher Suite Black List</a><br>[6]. <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-with-http-2-support-on-ubuntu-16-04#step-10-—-optimizing-nginx-for-best-performance" target="_blank" rel="noopener">Optimizing Nginx for Best Performance</a></p>]]></content>
    
    <summary type="html">
    
      Nginx服务器设置 HTTP/2
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Nginx" scheme="https://blog.qiwihui.com/tags/Nginx/"/>
    
      <category term="http2" scheme="https://blog.qiwihui.com/tags/http2/"/>
    
  </entry>
  
  <entry>
    <title>2016年，是忙碌而无知的一年</title>
    <link href="https://blog.qiwihui.com/2017/01/08/2016-too-much-too-little/"/>
    <id>https://blog.qiwihui.com/2017/01/08/2016-too-much-too-little/</id>
    <published>2017-01-08T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>2016年是毕业后觉得过得最快的一年，也是至今觉得过得最快的一年。因为”忙碌”和没有思考，我在这一年过得没有目标，没有计划。<br><a id="more"></a></p><h2 id="Ingress-和-Minecraft"><a href="#Ingress-和-Minecraft" class="headerlink" title="Ingress 和 Minecraft"></a>Ingress 和 Minecraft</h2><p>2016年主要玩了两款游戏：Ingress 和 Minecraft（我的世界）。在Ingress上花费了很多的夜晚时间，在 Minecraft 上花费了一些周末时间。</p><h3 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h3><p>入坑 Ingress 已经四年，今年重新捡起，从7月到11月，我用了五个月的时间从原来的8级升到了16级（游戏等级上线），时间是2016年11月30日23点58分，<br>总计4，0000，000AP。16级，我的第一个念头是：<strong>Never Again</strong>，我再也不能16级了，可能再也不会半夜两三点仍然在路上活动，可能再也不会冻手冻脚地<br>在寒风中画图，可能再也奔波几十公里去连一条 link，可能再也不会月走路330km… 但依旧会和队友一起做刷任务，做多重。每一次升级，都是一次<br>never again 事情，但是这一次真的就never again 了。<br>Ingress 的游戏经历回想过来也是像电影一样：入坑，摸索，渐熟，AFK，归来，重拾，融入，疯狂，最后归于平静。也许之后回想起来这一段时间，<br>也会感叹一句：也曾经疯狂过。</p><p>P.S. 同一个号可以转阵营重置而再次16级，但是，你愿意背弃自己的信仰么？</p><h3 id="Minecraft"><a href="#Minecraft" class="headerlink" title="Minecraft"></a>Minecraft</h3><p>我的世界很自由，所有的东西都可以自己构建，因此世界只限制于想象力。自己维护了一个 Minecraft 的服务器，和朋友共同建设了一个世界。</p><h2 id="开源项目贡献"><a href="#开源项目贡献" class="headerlink" title="开源项目贡献"></a>开源项目贡献</h2><h3 id="hiwifi-ss"><a href="#hiwifi-ss" class="headerlink" title="hiwifi-ss"></a>hiwifi-ss</h3><p>我在8月1号开始维护开源项目：<a href="https://github.com/qiwihui/hiwifi-ss" target="_blank" rel="noopener">hiwifi-ss</a>, 这是一个基于前人工作做的极路由翻墙插件，<br>主要完成了在新版本极路由上的界面更新和功能修复。因为工作和 Ingress 的原因，这个项目在10月底就暂时没有继续维护了。</p><p>还想做一些其他的项目和实现一些其他的想法，比如一个RSS在线阅读器。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><h3 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h3><p>2016年缺乏系统地学习。之前获取和记录知识的过程（书，RSS, 博客等 -&gt; Pocket暂存 -&gt; Evernote记录和归纳 -&gt; 博文输出）并没有很好的实行和保持，<br>使得代码虽然会写，但是没有系统地去理解为什么，没有去理解怎样更好。拿搬砖来讲，只是回垒墙，还没有上升到造房子或者造更好的房子的程度。</p><h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><p>今年没有读太多的书，准确说很少，以至于在最近的一段时间明显感觉到粗口增加，思考迷茫。看的文章很碎，而且没有及时思考，使得这一年没有太多的<br>思想收入。</p><h3 id="英语、日语"><a href="#英语、日语" class="headerlink" title="英语、日语"></a>英语、日语</h3><p>最近一段时间的英语学习质量也明显下降，多次任务没有认真及时完成，总体感觉能力没有提升。日语学习中断，停滞不前。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>生活依旧是生活。</p><h3 id="夜"><a href="#夜" class="headerlink" title="夜"></a>夜</h3><p>今年喜欢上了星星，很多时间在晚上活动，很多时候熬夜到很晚不肯睡。其实这也没有什么不对。只是如无必要，不要晚睡。</p><h3 id="游"><a href="#游" class="headerlink" title="游"></a>游</h3><p>2016年想去很多地方，然而总是错过，广州，深圳，杭州，上海，以及一直以来的衡山，都成为了今年的遗憾。唯一的努力是完成了十月计划而耽搁的日本之行，<br>第一次出国成就达成。但是计划不足和日语能力也使得这次出行有些仓促，没有达到自己的预期。</p><h3 id="感情"><a href="#感情" class="headerlink" title="感情"></a>感情</h3><blockquote><p>逃避问题和冷漠处理问题都是感情的敌人。(来自一个人的反思)</p></blockquote><p>逃避可耻且没有用。然而一个人却可以做很多事情而不需要进行顾虑太多。</p><h3 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h3><p>有很多的时间花在了刷 Twitter 上，没事了刷，吃完饭刷，中午刷，晚上刷，甚至有时走路都在刷。认识了一些新朋友，但是除了游戏和社交软件<br>上的对话，没有更多深入的交流了。</p><h2 id="总结和计划"><a href="#总结和计划" class="headerlink" title="总结和计划"></a>总结和计划</h2><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>计划有余而行动不足</strong>，是这一年的总结。很多事情有了开始，但是没有很好地坚持下去</p><h3 id="2017年的计划"><a href="#2017年的计划" class="headerlink" title="2017年的计划"></a>2017年的计划</h3><blockquote><p>日拱一卒，功不唐捐。</p></blockquote><p>这是以后的每一年计划的一个宗旨：至少要坚持干完一件事情！每年都想做很多事情，但可能没有时间，也可能没有精力，不期待速成，但求每天都有进步。</p><p>详：</p><ol><li><strong>早睡</strong> 如无必要，不许晚睡。如果没有非要第二天完成的事情，不要晚睡。睡前完成阅读任务即可。</li><li><strong>早起</strong> 早起是一种习惯，坚持。早起之后可以做如下事情：静坐，总结前一天和活动和列举当天的任务，或者早起简单的运动。</li><li><strong>戒咖啡</strong> 原因很简单，咖啡影响节律控制和胃。</li><li><strong>每天阅读半小时</strong> 阅读指阅读除了技术书籍以外的书籍，每看完一本书都需要思考和总结。</li><li><strong>每周写总结</strong> 包括工作总结和非工作总结。</li><li><strong>每周一篇博客</strong> 技术博客或者其他内容博客，但是每月技术博客数量应该要多余其他博客数量。总结也好，记录也好，要有输出，才能进步。</li><li><strong>每天拍一张照片</strong> 简单，但是坚持，发在 Instagram 上。</li></ol><p>简：</p><ol><li>技术成长。<ul><li>网络基础知识和操作系统知识；</li><li>全栈（开发，运维，产品等）知识构建；</li><li>语言：动态语言，函数语言和强类型语言；</li><li>维护开源项目；</li></ul></li><li>知识记录，归纳和总结：（书，RSS, 博客等 -&gt; Pocket暂存 -&gt; Evernote记录和归纳 -&gt; 博文输出）</li><li>坚持锻炼身体，合理饮食。</li><li>学好日语。<strong>这是今年要坚持完成的一件事</strong>。</li><li>英语不落下。</li><li>完成一次旅行，登山。</li><li>学会独处。</li></ol>]]></content>
    
    <summary type="html">
    
      2016总结，太多时间在夜晚行动，没有思考的一年
    
    </summary>
    
      <category term="生活" scheme="https://blog.qiwihui.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="总结" scheme="https://blog.qiwihui.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>极路由+shadowsocks翻墙</title>
    <link href="https://blog.qiwihui.com/2016/08/06/hiwifi-with-shadowsocks/"/>
    <id>https://blog.qiwihui.com/2016/08/06/hiwifi-with-shadowsocks/</id>
    <published>2016-08-06T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>翻墙折腾无止境.<br>使用路由器翻墙的一个好处在于，对于一些翻墙配置很繁琐的设备，只需要简单地连上路由wifi就可以实现翻墙，<br>来家里的朋友也可以不需要配置就可以一连翻墙.<br><a id="more"></a></p><h2 id="一些背景"><a href="#一些背景" class="headerlink" title="一些背景"></a>一些背景</h2><p>在旧版本的极路由已经有很不错的翻墙设置方式，感谢前人的大树：三流火的shadwosocks插件.在旧版本的极路由上<br>设置shadowsocks翻墙可已参考<a href="https://luolei.org/hiwifi-shadowsocks/" target="_blank" rel="noopener">极路由Shadowsocks家庭无痛翻墙实践</a>.</p><p>最近极路由更新了新版本，管理界面风格大变导致之前的插件不能使用，在网上找了一段时间也没有看到有人对之前的<br>插件进行更新，所以决定自己写一个(其实后来才知道stary.love也有可用的插件,比我修改的插件功能强大很多).<br>所谓的自己写也只是在前人的基础上修改为适应新的极路由后台管理假面. 这过程要感谢stary.love的帮助，为我提供了<br>早期插件的一些源代码，以及许多帮着测试使用的人.</p><h2 id="一些方法"><a href="#一些方法" class="headerlink" title="一些方法"></a>一些方法</h2><p>项目地址: <a href="https://github.com/qiwihui/hiwifi-ss" target="_blank" rel="noopener">qiwihui/hiwifi-ss</a>, 现在插件的状态：</p><ol><li><p>界面结构适应了新的hiwifi后台管理；<br> <img src="/media/files/2016/08/07-ss-settings.png"><img></p></li><li><p>开启关闭翻墙功能和设置dns解析功能也都恢复；<br> <img src="/media/files/2016/08/07-ss-advance.png"><img></p></li><li><p>新增加了最新的gfwlist列表(截止到2016年8月7日)的路由规则,解决了之前有部分网站无法访问的问题;</p></li></ol><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>(1). 开启极路由开发者模式</p><p>  需要开发者模式才能安装. 网上有很多教程,不赘述.</p><p>(2). 登录路由器, 一键安装脚本.</p><p>  极路由默认开启1022端口作为ssh端口,故使用<code>ssh root@192.168.199.1 -p 1022</code>登录路由器,运行如下一键脚本:</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp &amp;&amp; curl -k -o shadow.sh https://raw.githubusercontent.com/qiwihui/hiwifi-ss/master/shadow.sh &amp;&amp; sh shadow.sh &amp;&amp; rm shadow.sh</span><br></pre></td></tr></table></figure><p>然后登录后台管理界面,在<code>互联网</code>菜单下的<code>shadowsocks设置</code>配置ss账号就可以了.</p><h2 id="一些展望"><a href="#一些展望" class="headerlink" title="一些展望"></a>一些展望</h2><p>未来要做的一些工作:</p><ol><li>功能的改进: 包括但不限于ss版本的更新, 规则的更新, 流量混淆等;</li><li>可能支持更多种类的工具;</li><li>最重要的是: 开源. 包括底层的代码重写或者是找到之前的代码.</li></ol><h2 id="一些感想"><a href="#一些感想" class="headerlink" title="一些感想"></a>一些感想</h2><ul><li>“免费”是最贵的</li></ul><p>怎么说呢, 我在最开始的时候, 寻找免费的vpn是获得翻墙的唯一方式, 这种方式的不好之处在于: vpn不稳定, 经常换,<br>而且花费在寻找上的精力和时间算下来不合算. 之后精力了<code>地下铁路vpn</code>的消失之后, 自己搭建翻墙才成为我的主要翻墙<br>方式. 一个月花费的费用不到10美元, 带来的时稳定的流量和方式. VPS+shadowsocks/v2ray就可以提供稳定持久的方式.</p><ul><li>风险</li></ul><p>不怎么使用vpn(免费或者收费)以及一些其他的收费翻墙服务，一则担心不安全, 流量劫持或者流量分析都有可能，甚者蜜罐,<br>二则是重点观察对象, 服务失效的可能性还是存在的. 因此, 加密翻墙流量和混淆翻墙行为时十分重要的过程.</p><ul><li>技术人员获取资讯和信息的广度和及时性</li></ul><p>因为GFW, 墙内封闭的环境使得获取技术知识的广度和及时性都受到了很严重的影响, 翻墙让搞技术的我们与世界更接近.</p><p>分享 <a href="https://twitter.com/lepture" target="_blank" rel="noopener">@lepture</a>的一个tweet: </p><blockquote><p>「我的互联网，上谷歌维基搜知识，上Reddit看看头条，上YouTube学习和开眼界，上Twitter关注一些正在改变世界的人和事，<br>去Quora上看看好的问题和回答，去SlideShare上学习以及了解不同的想法和观点」</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>翻墙在于不断折腾.</p>]]></content>
    
    <summary type="html">
    
      use hiwifi to cross the GFW
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hiwifi" scheme="https://blog.qiwihui.com/tags/hiwifi/"/>
    
      <category term="shadowsocks" scheme="https://blog.qiwihui.com/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>使用免费的let’s encrypt证书为网站开启https</title>
    <link href="https://blog.qiwihui.com/2016/04/09/enable-https/"/>
    <id>https://blog.qiwihui.com/2016/04/09/enable-https/</id>
    <published>2016-04-09T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客将介绍使用免费的let’s encrypt证书, 为网站开启https。<br><a id="more"></a></p><h2 id="HTTPS简介"><a href="#HTTPS简介" class="headerlink" title="HTTPS简介"></a>HTTPS简介</h2><p>(https, http over ssl)</p><h2 id="为啥要用Let’s-Encrypt"><a href="#为啥要用Let’s-Encrypt" class="headerlink" title="为啥要用Let’s Encrypt"></a>为啥要用Let’s Encrypt</h2><p>(free, easy)</p><h2 id="Let’s-Encrypt介绍"><a href="#Let’s-Encrypt介绍" class="headerlink" title="Let’s Encrypt介绍"></a>Let’s Encrypt介绍</h2><p>(directory tree)</p><h2 id="安装实践"><a href="#安装实践" class="headerlink" title="安装实践"></a>安装实践</h2><p>我使用的是Debian 7，其他系统类似。</p><ol><li>使用官方推荐的<code>letsencrypt-auto</code>安装：</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/letsencrypt/letsencrypt</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> letsencrypt</span><br><span class="line"></span><br><span class="line">$ ./letsencrypt-auto --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><ol start="2"><li>获取证书</li></ol><p>实验前，我已将<code>www.qiwihui.com</code>站点移到了要安装的服务器上，nginx已经在运行，因此可以使用 webroot 模式来获取证书，<br>先安装webroot插件，这是一个可以不用停止 Web 服务就能让 Let’s Encrypt 验证域名的插件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ /.well-known &#123;</span><br><span class="line">    allow all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装证书命令如下：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./letsencrypt-auto certonly --webroot --webroot-path /var/www/blog/ -d qiwihui.com -d www.qiwihui.com --agree-tos --email qiwihui@qiwihui.com</span><br></pre></td></tr></table></figure><p>其中<code>/var/www/blog/</code>为网站根目录。证书申请成功后会提示一下信息，包括证书存放目录和证书过期时间：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">IMPORTANT NOTES:</span><br><span class="line"></span><br><span class="line">- Congratulations! Your certificate and chain have been saved at</span><br><span class="line">/etc/letsencrypt/live/qiwihui.com/fullchain.pem. Your cert will</span><br><span class="line">expire on 2016-07-08. To obtain a new version of the certificate <span class="keyword">in</span></span><br><span class="line">the future, simply run Let<span class="string">'s Encrypt again.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- If you like Let'</span>s Encrypt, please consider supporting our work by:</span><br><span class="line"></span><br><span class="line">Donating to ISRG / Let<span class="string">'s Encrypt:  https://letsencrypt.org/donate</span></span><br><span class="line"><span class="string">Donating to EFF:                    https://eff.org/donate-le</span></span><br></pre></td></tr></table></figure><p><em>重要提示</em>：需要将站点的DNS指向对用的服务器，否则会提示申请不过。</p><ol start="3"><li>配置Nginx</li></ol><p>首先生成2048位 DH parameters：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /var/www/ssl/</span><br><span class="line">$ sudo openssl dhparam -out /var/www/ssl/dhparam.pem 2048</span><br></pre></td></tr></table></figure><p>Nginx的配置如下：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">server_name</span> qiwihui.com www.qiwihui.com;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">        <span class="attribute">ssl_certificate</span>     /etc/letsencrypt/live/qiwihui.com/fullchain.pem;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/qiwihui.com/privkey.pem;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_dhparam</span> /var/www/ssl/dhparam.pem;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">ssl_ciphers</span> <span class="string">'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#网站其他配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要开启全站 https 的话，需要将 http 转向到 https，再添加一个 server 就好了：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> qiwihui.com www.qiwihui.com;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完成后reload nginx 就可以了：<code>nginx -s reload</code></p><h3 id="验证检测"><a href="#验证检测" class="headerlink" title="验证检测"></a>验证检测</h3><ol><li>用浏览器打开目标网址<code>https://qiwihui.com</code>，可以查看到证书信息：</li></ol><p><img src="/media/files/2015/04/10-https-on-qiwihui-com.png"><img></p><ol start="2"><li>使用 <a href="https://www.ssllabs.com/ssltest/index.html" target="_blank" rel="noopener">Qualys ssllabs</a> 在线测试服务器证书强度以及配置正确性：</li></ol><p><img src="/media/files/2015/04/10-ssllabs-results.png"><img></p><h3 id="后续更新"><a href="#后续更新" class="headerlink" title="后续更新"></a>后续更新</h3><p>Let’s Encrypt 的有效期只有90天，官方客户端不支持持续更新，所以要设置自动更新，让证书一直有效。</p><p>在crontab 中设置定时任务：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">30 2 * * 1 /root/letsencrypt/letsencrypt-auto renew &gt;&gt; /var/<span class="built_in">log</span>/le-renew.log</span><br><span class="line">35 2 * * 1 /etc/init.d/nginx reload</span><br></pre></td></tr></table></figure><p>上述配置会再每周一凌晨2:30执行<code>letsencrypt-auto renew</code>，在2点35分重新加载nginx配置，同时更新日志会在写在<code>/var/log/le-renewal.log</code>中。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Let’s Encrypt TLS/SSL is free.</p>]]></content>
    
    <summary type="html">
    
      enable https for website
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Nginx" scheme="https://blog.qiwihui.com/tags/Nginx/"/>
    
      <category term="https" scheme="https://blog.qiwihui.com/tags/https/"/>
    
      <category term="Let’s Encrypt" scheme="https://blog.qiwihui.com/tags/Let%E2%80%99s-Encrypt/"/>
    
  </entry>
  
  <entry>
    <title>年度总结 - 我的2015, 做了很多事, 欠了很多债</title>
    <link href="https://blog.qiwihui.com/2016/02/10/my-2015/"/>
    <id>https://blog.qiwihui.com/2016/02/10/my-2015/</id>
    <published>2016-02-10T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>一句话总结2015年: 做了很多事, 欠了很多债。<br><a id="more"></a></p><h2 id="2015年"><a href="#2015年" class="headerlink" title="2015年"></a><strong>2015年</strong></h2><p>年初三月离开了毕业后的第一份正式工作, 七月底加入<a href="http://www.qssec.com" target="_blank" rel="noopener">青松</a>, 中间的四个月从迷茫焦虑, 到完成第一次知识整合和补充, 算是一次小的飞跃。 在新团队的这<br>半年是自己能力和知识增长最快的半年。</p><p>感谢一路陪伴的岩, 许多事情不再纠结, 更有勇气去做一件事情。</p><p>整理和输出的东西太少, Evernote 和 Pocket 上记录的文章基本未有效整理, 博客自上次更新已是半年, 这点需要改进。</p><p>个人项目上, COMICS项目, 微信RSS项目和自己的公众号(我都忘了叫啥了)相继停止了维护/更新。 开源项目基本维持在阅读和 fork 别人项目的水平上, 对开源项目的贡献不够。<br>自己开发和信息收集的方法工具没有整理。</p><p>2015年阅书寥寥, 《三体》和《量子物理史话》是为数不多的能记住的, 倒是知乎上迄今645万字的阅读量确实令我咋舌, 读书的质和量都有待提高。</p><p>语言能力上, 英语继续保持之前的学习量, 只是意语刚开始没多久就放弃了。</p><p>每年都会学一项不一样的技能或者挑战一件不一样的事情, 2015年一个人背包旅行了一个月, 见识了江南的风景, 新增的技能就算滑雪了。相较于之前, 2015年的技能成长<br>比较缓慢。</p><p>2015年半壮半胖得长了十斤, 体重达到了历史最高点, 这是一段时间失衡与调整的结果。 2016年需要停止增长, 增加体能和力量训练。</p><h2 id="2016年目标"><a href="#2016年目标" class="headerlink" title="2016年目标"></a><strong>2016年目标</strong></h2><h3 id="个人能力成长上"><a href="#个人能力成长上" class="headerlink" title="个人能力成长上:"></a>个人能力成长上:</h3><ul><li>编程能力上, Python/Django 编程能力加强, 深入理解代码运行的底层机制;</li><li>计算机基础知识的补足, 主要是网络知识和数据结构, 算法知识等;</li><li>前端能力以及产品化能力;</li><li>系统化知识的学习方法和框架, 增加整理和输出;</li><li>利用自己掌握的资源, 建立信息收集和整合项目, 打造自己的工具。</li></ul><h3 id="生活上"><a href="#生活上" class="headerlink" title="生活上"></a>生活上</h3><ul><li>一两项新的技能, 一项自我挑战, 一张共同的愿望清单;</li><li>乐观一些, 简单一些。</li></ul><p>2015年是变革与变化, 机遇和挑战。新的一年, 新的成长, 新的奋斗, 不变的梦想! </p><h2 id="附录一下逗比的过去"><a href="#附录一下逗比的过去" class="headerlink" title="附录一下逗比的过去:"></a><strong>附录一下逗比的过去</strong>:</h2><ul><li><a href="!--￼0--">年度总结 - 2014年的点点滴滴</a></li><li><a href="!--￼1--">年度总结 - 过去的2013年</a></li></ul>]]></content>
    
    <summary type="html">
    
      a summary of the past year 2015
    
    </summary>
    
      <category term="生活" scheme="https://blog.qiwihui.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="总结" scheme="https://blog.qiwihui.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>翻译 - 9个值得知道的cURL的用法</title>
    <link href="https://blog.qiwihui.com/2015/06/26/9-uses-for-curl-worth-knowing/"/>
    <id>https://blog.qiwihui.com/2015/06/26/9-uses-for-curl-worth-knowing/</id>
    <published>2015-06-26T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>对于 HTTP 工程师和 API 设计师来说，使用命令行操作 HTTP 是非常有用的技能。<a href="http://curl.haxx.se/" target="_blank" rel="noopener">cURL</a><br>库和 <code>curl</code> 命令可以给你设计请求，放入管道并查看相应的能力。<code>curl</code> 能力的缺点在于它能覆盖多广的<br>命令选项。使用 <code>curl --help</code> 会展示出150条不同的选项。这篇文章演示了9个基本的，现实程序用到的 <code>curl</code> 命令。<br><a id="more"></a></p><p>在这篇教程中我们会使用httpkit的 <a href="http://echo.httpkit.com/" target="_blank" rel="noopener">echo</a> 服务做为端点，回显服务的响应<br>是它收到 HTTP 请求的 JSON 表示。</p><h2 id="创建请求"><a href="#创建请求" class="headerlink" title="创建请求"></a>创建请求</h2><p>我们从最简单的 <code>curl</code> 命令开始。</p><p><strong>请求</strong>  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http://echo.httpkit.com</span><br></pre></td></tr></table></figure><p><strong>响应</strong> </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;method&quot;: &quot;GET&quot;,</span><br><span class="line">  &quot;uri&quot;: &quot;/&quot;,</span><br><span class="line">  &quot;path&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;/&quot;,</span><br><span class="line">    &quot;query&quot;: &quot;&quot;,</span><br><span class="line">    &quot;params&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;host&quot;: &quot;echo.httpkit.com&quot;,</span><br><span class="line">    &quot;user-agent&quot;: &quot;curl/7.24.0 ...&quot;,</span><br><span class="line">    &quot;accept&quot;: &quot;*/*&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;body&quot;: null,</span><br><span class="line">  &quot;ip&quot;: &quot;28.169.144.35&quot;,</span><br><span class="line">  &quot;powered-by&quot;: &quot;http://httpkit.com&quot;,</span><br><span class="line">  &quot;docs&quot;: &quot;http://httpkit.com/echo&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就这样，我们用 <code>curl</code> 创建了一个请求，<code>curl</code> 使用的 HTTP 动词默认为 <code>GET</code>，请求的资源指向的是<br> <a href="http://httpkit.com/" target="_blank" rel="noopener">httpkit</a> 的 <a href="http://httpkit.com/echo" target="_blank" rel="noopener">echo</a> 服务：<code>http://echo.httpkit.com</code>。</p><p>你可以添加路径和查询变量：</p><p><strong>请求</strong>  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http://echo.httpkit.com//path?query=string</span><br></pre></td></tr></table></figure><p><strong>响应</strong> </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; ...</span><br><span class="line">  &quot;uri&quot;: &quot;/path?query=string&quot;,</span><br><span class="line">  &quot;path&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;/path&quot;,</span><br><span class="line">    &quot;query&quot;: &quot;?query=string&quot;,</span><br><span class="line">    &quot;params&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;string&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置请求方法"><a href="#设置请求方法" class="headerlink" title="设置请求方法"></a>设置请求方法</h2><p><code>curl</code>默认的请求方法为 <code>GET</code> ，可以用 <code>-X</code> 参数设置成任何你想要的方法，通常为 <code>POST</code>，<code>PUT</code>，<code>DELETE</code><br>方法，甚至是自定义的方法。</p><p><strong>请求</strong>  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X POST echo.httpkit.com</span><br></pre></td></tr></table></figure><p><strong>响应</strong> </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;method&quot;: &quot;POST&quot;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如你看到的，<code>http://</code> 协议前缀可以不使用，因为这是默认假定的。接着实施 <code>DELETE</code> 方法：</p><p><strong>请求</strong>  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X DELETE echo.httpkit.com</span><br></pre></td></tr></table></figure><p><strong>响应</strong> </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;method&quot;: &quot;DELETE&quot;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置请求头部"><a href="#设置请求头部" class="headerlink" title="设置请求头部"></a>设置请求头部</h2><p>请求头部允许客户端给服务器提供诸如授权，内容类型等信息。比如，OAuth2 使用 <code>Authorization</code> 头<br>来传递访问令牌（access tokens）。<code>curl</code> 使用 <code>-H</code> 选项设置自定义头部。</p><p><strong>请求</strong>  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Authorization: OAuth 2c4419d1aabeec&quot; \</span><br><span class="line">     http://echo.httpkit.com</span><br></pre></td></tr></table></figure><p><strong>响应</strong> </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;...</span><br><span class="line">&quot;headers&quot;: &#123;</span><br><span class="line">    &quot;host&quot;: &quot;echo.httpkit.com&quot;,</span><br><span class="line">    &quot;authorization&quot;: &quot;OAuth 2c4419d1aabeec&quot;,</span><br><span class="line">  ...&#125;,</span><br><span class="line">...&#125;</span><br></pre></td></tr></table></figure><p>可以使用 <code>-H</code> 多次来设置多个头部。</p><p><strong>请求</strong>  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Accept: application/json&quot; \</span><br><span class="line">     -H &quot;Authorization: OAuth 2c3455d1aeffc&quot; \</span><br><span class="line">     http://echo.httpkit.com</span><br></pre></td></tr></table></figure><p><strong>响应</strong> </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; ...</span><br><span class="line">  &quot;headers&quot;: &#123; ...</span><br><span class="line">    &quot;host&quot;: &quot;echo.httpkit.com&quot;,</span><br><span class="line">    &quot;accept&quot;: &quot;application/json&quot;,</span><br><span class="line">    &quot;authorization&quot;: &quot;OAuth 2c3455d1aeffc&quot; </span><br><span class="line">   &#125;, ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送请求体"><a href="#发送请求体" class="headerlink" title="发送请求体"></a>发送请求体</h2><p>现今许多有名的 HTTP API 使用 <code>application/json</code> 和 <code>application/xml</code> 来 <code>POST</code> 和 <code>PUT</code> 资源，<br>而不是用HTML化的数据。我们试试 <code>PUT</code> 一些 JSON 数据到服务器上。</p><p><strong>请求</strong>  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X PUT \</span><br><span class="line">     -H &apos;Content-Type: application/json&apos; \</span><br><span class="line">     -d &apos;&#123;&quot;firstName&quot;:&quot;Kris&quot;, &quot;lastName&quot;:&quot;Jordan&quot;&#125;&apos;</span><br><span class="line">     echo.httpkit.com</span><br></pre></td></tr></table></figure><p><strong>响应</strong> </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;method&quot;: &quot;PUT&quot;, ...</span><br><span class="line">   &quot;headers&quot;: &#123; ...</span><br><span class="line">     &quot;content-type&quot;: &quot;application/json&quot;,</span><br><span class="line">     &quot;content-length&quot;: &quot;40&quot;</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;body&quot;: &quot;&#123;\&quot;firstName\&quot;:\&quot;Kris\&quot;,\&quot;lastName\&quot;:\&quot;Jordan\&quot;&#125;&quot;,</span><br><span class="line">   ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="使用文件作为请求体"><a href="#使用文件作为请求体" class="headerlink" title="使用文件作为请求体"></a>使用文件作为请求体</h2><p>将 JSON/XML 写到命令行中是令人头疼的，尤其有时这个文件很大时。幸运的是， <code>curl</code> 的 <code>@readfile</code><br>可以很容易地读取文件的文本。如果上面例子中的 JSON 保存为文件 <code>example.json</code>， 我们可以这么做：</p><p><strong>请求</strong>  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X PUT \</span><br><span class="line">     -H &apos;Content-Type: application/json&apos; \</span><br><span class="line">     -d @example.json</span><br><span class="line">     echo.httpkit.com</span><br></pre></td></tr></table></figure><h2 id="发送-HTML-表单数据"><a href="#发送-HTML-表单数据" class="headerlink" title="发送 HTML 表单数据"></a>发送 HTML 表单数据</h2><p>如果不能发送带有数据的请求体，可以设置类似 <code>POST</code> 的方法真是没什么用。也许我们可以试试发送 HTML<br>表单数据。使用 <code>-d</code> 选项，我们可以制定 URL 编码的名称和值。</p><p><strong>请求</strong>  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -d &quot;firstName=Kris&quot; \</span><br><span class="line">     -d &quot;lastName=Jordan&quot; \</span><br><span class="line">     echo.httpkit.com</span><br></pre></td></tr></table></figure><p><strong>响应</strong> </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;method&quot;: &quot;POST&quot;, ...</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;content-length&quot;: &quot;30&quot;,</span><br><span class="line">    &quot;content-type&quot;:&quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;body&quot;: &quot;firstName=Kris&amp;lastName=Jordan&quot;, ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到 <code>POST</code> 这个方法，即使我们没有指明方法，当 <code>curl</code> 看到表单数据时它会指定 <code>POST</code> 方法。<br>可以使用 <code>-X</code> 选项来覆盖这个方法。请求的 <code>Content-Type</code> 也被自动设置为 <code>application/x-www-form-urlencoded</code>，<br>这样服务器就知道怎么解析数据了。最终，请求体由编码了每一个表单域的 URL 构成。</p><h2 id="发送-HTML-Multipart-file-表单（上传文件）"><a href="#发送-HTML-Multipart-file-表单（上传文件）" class="headerlink" title="发送 HTML Multipart/file 表单（上传文件）"></a>发送 HTML Multipart/file 表单（上传文件）</h2><p>当涉及到文件上传的表单时，正如你从写上传文件表单时知道的那样，这些使用 <code>multipart/form-data</code> 文本类型，<br>带有 <code>enctype</code> 属性。cURL 使用 <code>-F</code> 配合上面介绍的 <code>@readFile</code> 宏来处理。</p><p><strong>请求</strong>  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -F &quot;firstName=Kris&quot; \</span><br><span class="line">     -F &quot;publicKey=@idrsa.pub;type=text/plain&quot; \</span><br><span class="line">     echo.httpkit.com</span><br></pre></td></tr></table></figure><p><strong>响应</strong> </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;method&quot;: &quot;POST&quot;,</span><br><span class="line">  ...</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;content-length&quot;: &quot;697&quot;,</span><br><span class="line">    &quot;content-type&quot;: &quot;multipart/form-data;</span><br><span class="line">    boundary=----------------------------488327019409&quot;,</span><br><span class="line">    ... &#125;,</span><br><span class="line">  &quot;body&quot;: &quot;------------------------------488327019409\r\n</span><br><span class="line">           Content-Disposition: form-data;</span><br><span class="line">           name=\&quot;firstName\&quot;\r\n\r\n</span><br><span class="line">           Kris\r\n</span><br><span class="line">           ------------------------------488327019409\r\n</span><br><span class="line">           Content-Disposition: form-data;</span><br><span class="line">           name=\&quot;publicKey\&quot;;</span><br><span class="line">           filename=\&quot;id_rsa.pub\&quot;\r\n</span><br><span class="line">           Content-Type: text/plain\r\n\r\n</span><br><span class="line">           ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAkq1lZYUOJH2</span><br><span class="line">           ... more [a-zA-Z0-9]* ...</span><br><span class="line">           naZXJw== krisjordan@gmail.com\n\r\n</span><br><span class="line">           ------------------------------488327019409</span><br><span class="line">           --\r\n&quot;,</span><br><span class="line">...&#125;</span><br></pre></td></tr></table></figure><p>像 <code>-d</code> 选项一样，当使用 <code>-d</code> 选项时 <code>curl</code> 会自动地默认使用 <code>POST</code> 方法，<code>multipart/form-data</code> 文件<br>类型头部，计算长度并组成请求体。请注意 <code>@readFile</code>  宏是怎样读取一个文件的文本为任何字符的，这个不是<br>一个单独的操作，<code>;text/plain</code> 指定了文件的 MIME 文本类型。在未指定的情况下，<code>curl</code> 会尝试嗅探文本类型。</p><h2 id="测试虚拟主机，不使用-DNS"><a href="#测试虚拟主机，不使用-DNS" class="headerlink" title="测试虚拟主机，不使用 DNS"></a>测试虚拟主机，不使用 DNS</h2><p>通常，在不修改 DNS 覆盖主机的情况下测试一个虚拟主机或者是缓存代理时很有用的。只需使用 cURL 将请求指向<br>主机的 IP 地址 并覆写 <code>Host</code> 头。</p><p><strong>请求</strong>  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Host: google.com&quot; 50.112.251.120</span><br></pre></td></tr></table></figure><p><strong>响应</strong> </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;method&quot;: &quot;GET&quot;, ...</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;host&quot;: &quot;google.com&quot;, ...</span><br><span class="line">  &#125;, ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查看响应头部"><a href="#查看响应头部" class="headerlink" title="查看响应头部"></a>查看响应头部</h2><p>API 正越来越多的利用响应头部来提供授权，速率限制，缓存等方面的信息。cURL 使用 <code>-i</code> 选项来查看响应头部<br>和响应体。</p><p><strong>请求</strong>  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i echo.httpkit.com</span><br></pre></td></tr></table></figure><p><strong>响应</strong> </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.1.19</span><br><span class="line">Date: Wed, 29 Aug 2012 04:18:19 GMT</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Content-Length: 391</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-Powered-By: http://httpkit.com</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;method&quot;: &quot;GET&quot;,</span><br><span class="line">  &quot;uri&quot;: &quot;/&quot;, ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原文：<a href="http://httpkit.com/resources/HTTP-from-the-Command-Line/" target="_blank" rel="noopener">9 uses for cURL worth knowing</a></p>]]></content>
    
    <summary type="html">
    
      9 uses or cURL worth knowing
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="curl" scheme="https://blog.qiwihui.com/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title>使用Nginx，supervisor在DigitalOcean中部署tornado项目</title>
    <link href="https://blog.qiwihui.com/2015/06/25/deploy-tornado-with-github-digitalocean/"/>
    <id>https://blog.qiwihui.com/2015/06/25/deploy-tornado-with-github-digitalocean/</id>
    <published>2015-06-25T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>一直在想把微信的公众号的文章导出为RSS阅读，方便阅读和减少对微信的依赖，后来看到<br><a href="https://github.com/zhu327/rss" target="_blank" rel="noopener">zhu327/rss</a> 这个项目，这是一个用来生成微博，微信公众号，知乎日报 RSS 的Web APP。<br>但是这个项目的demo部署在Red Hat的openshift上，<br>囿于对这个cloud的操作不是很熟，所以想着把这个项目重新部署到自己在DigitalOcean的机器上，就fork了这个项目开始啦！<br><a id="more"></a></p><p>以下涉及到的内容有：</p><ul><li>Linux创建用户和修改用户组</li><li>git hooks实现自动部署</li><li>tornado项目的基本框架结构</li><li>supervisor管理进程</li><li>Nginx配置HTTP服务代理</li><li>DNS的记录添加</li></ul><h2 id="基本服务器设置"><a href="#基本服务器设置" class="headerlink" title="基本服务器设置"></a>基本服务器设置</h2><p>因为之前并没有在我的服务器上创建过其他用户，如果直接用root用户的话不好，所以需要专门的一个账户来负责部署。</p><ol start="0"><li>登陆服务器：<code>ssh root@&lt;server-ip&gt;</code></li><li>创建一个用户<code>deploy</code>: <code>sudo adduser deploy</code></li><li>将用户加入sudoers中: <code>sudo usermod -a -G sudo deploy</code></li><li><p>添加远程连接的权限，这样就省去了输入密码了：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo su - deploy</span><br><span class="line">mkdir .ssh</span><br><span class="line">chmod 700 .ssh</span><br><span class="line">touch .ssh/authorized_keys</span><br><span class="line">chmod 600 .ssh/authorized_keys</span><br></pre></td></tr></table></figure><p> 其中，<code>700</code>表示只有文件拥有者才能读，写以及打开文件，<code>600</code>表示只能读和写。</p></li><li>接着将自己的公钥加入<code>authorized_keys</code>文件中，这个公钥在自己本机<code>~.ssh/id_rsa.pub</code>中。没有的话可以用<br><code>ssh-keygen -t rsa -C &quot;qwh005007@gmail.com&quot;</code>来生成。</li></ol><h2 id="创建使用git-hooks的自动部署"><a href="#创建使用git-hooks的自动部署" class="headerlink" title="创建使用git hooks的自动部署"></a>创建使用git hooks的自动部署</h2><p>自动部署的好处就是省去了每次都要上服务器。可以参见之前的一篇博客<br><a href="http://daozhang.info/deploy-projects-with-git-hooks/" target="_blank" rel="noopener">使用 Git Hooks 实现项目自动部署</a> 来创建这个远程的git server。</p><p>这里，我们要先fork <a href="https://github.com/zhu327/rss" target="_blank" rel="noopener">zhu327/rss</a> 这个项目，然后用<code>git clone --bare rss rss.git</code>生成原来<br>项目的裸仓库，然后将其复制到服务器上。我使用的是<code>~/remoteRepo/rss.git</code>做为git server，<code>~/deployment/rss</code>做为真正<br>生产的代码文件目录。</p><p>其中，git hooks中的<code>post-receive</code>文件的内容为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"># Check the remote git repository whether it is bare</span><br><span class="line">IS_BARE=$(git rev-parse --is-bare-repository)</span><br><span class="line">if [ -z &quot;$IS_BARE&quot; ]; then</span><br><span class="line">echo &gt;&amp;2 &quot;fatal: post-receive: IS_NOT_BARE&quot;</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">unset GIT_DIR</span><br><span class="line"># current user is git</span><br><span class="line">DeployPath=/home/deploy/deployment/rss</span><br><span class="line">if [ ! -d $DeployPath ] ; then</span><br><span class="line">echo &gt;&amp;2 &quot;fatal: post-receive: DEPLOY_DIR_NOT_EXIST: \&quot;$DeployPath\&quot;&quot;</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cd $DeployPath</span><br><span class="line">git add . -A &amp;&amp; git stash</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><h2 id="修改源代码"><a href="#修改源代码" class="headerlink" title="修改源代码"></a>修改源代码</h2><p><a href="https://github.com/zhu327/rss" target="_blank" rel="noopener">zhu327/rss</a> 项目的部署在openshift，为了将其部署在自己服务器上，修改<br>是必须的。</p><ul><li>删除了项目中的openshift hooks部分</li><li>将其中用到openshift环境变量<code>OPENSHIFT_DIY_IP</code>和<code>OPENSHIFT_DIY_PORT</code>修改为对应的<code>localhost</code>和<code>8000</code>端口</li><li>将<code>diy/templates/</code>中的<code>https://diy-devz.rhcloud.com</code>修改为之后要用到的地址 <code>http://rss.daozhang.info</code></li><li><p>然后将修改好的代码在本地的virtualenv环境中测试，并生成需要的python的模块文件<code>requirement.txt</code>。如下：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Jinja2==2.7.3</span><br><span class="line">MarkupSafe==0.23</span><br><span class="line">backports.ssl-match-hostname==3.4.0.2</span><br><span class="line">certifi==2015.04.28</span><br><span class="line">lxml==3.4.4</span><br><span class="line">python-dateutil==2.4.2</span><br><span class="line">python-memcached==1.54</span><br><span class="line">six==1.9.0</span><br><span class="line">tornado==4.2</span><br><span class="line">wsgiref==0.1.2</span><br></pre></td></tr></table></figure></li></ul><p>这些都好了之后就可以将本地的文件第一次push到服务器上了。因为之前已经设置好了git hook，所以可以在服务器上的<br><code>deployment/rss</code>看到项目的代码更新了。</p><h2 id="使用supervisor管理进程"><a href="#使用supervisor管理进程" class="headerlink" title="使用supervisor管理进程"></a>使用supervisor管理进程</h2><p><code>supervisor</code>是Linux中非常好用的进程管理工具，我们将使用它和Nginx一起来组成我们的服务的部署。</p><ol><li>安装supervisor：<code>pip install supervisor</code> 或者 <code>sudo apt-get install supervisor</code></li><li>创建一个目录来装supervisor的配置文件：<code>mkdir -p ~/local/etc/supervisord</code></li><li><p>创建superviosr的出要的配置文件：<code>touch ~/local/etc/supervisord.conf</code>，并加入如下内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">file=/home/deploy/tmp/supervisor.sock</span><br><span class="line"> </span><br><span class="line">[supervisord]</span><br><span class="line">user=deploy</span><br><span class="line">logfile=/home/deploy/logs/user/supervisord.log</span><br><span class="line">logfile_maxbytes=50MB</span><br><span class="line">logfile_backups=10 </span><br><span class="line">loglevel=info</span><br><span class="line">pidfile=/home/deploy/local/run/supervisord.pid supervisord.pid)</span><br><span class="line"> </span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"> </span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///home/deploy/tmp/supervisor.sock</span><br><span class="line"> </span><br><span class="line">[include]</span><br><span class="line">files = /home/deploy/local/etc/supervisord/*.ini</span><br></pre></td></tr></table></figure><p> 其中我们都适用用户目录下创建的<code>local</code>，<code>logs</code>和<code>tmp</code>文件夹来装这些文件。</p></li><li><p>创建一个rss.ini的文件用来作为rss服务：<code>touch ~/local/etc/supervisord/rss.ini</code>，放入如下内容：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:rss]</span><br><span class="line">command=python2.7 /home/deploy/deployment/rss/diy/start.py</span><br></pre></td></tr></table></figure><p> 其中，<code>start.py</code>是这个tornado项目的入口。</p></li><li><p>启动服务：<code>supervisord -c /home/deploy/local/etc/supervisord.conf</code>，因为用的是非默认的配置文件，这里<br>指定相应的配置文件位置。</p></li><li><p>一旦我们在之后修改了项目push了之后，我们需要重新启动rss：<code>supervisorctl restart rss</code>，因此，为了方便，<br>可以将这条命令加入项目git hooks中的<code>post-receive</code>文件末尾。</p></li></ol><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>Nginx很好很强大，我们用它来做为我们的HTTP服务器。</p><ol><li><p>安装Nginx，这里，我们适用从源代码安装Nginx，并配置一些log，pid等的目录到deploy的用户目录下，这里，写<br>一个安装的脚本<code>install.sh</code>：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/src</span><br><span class="line">mkdir -p ~/tmp/nginx/fcgi ~/tmp/nginx/proxy ~/tmp/nginx/client</span><br><span class="line"></span><br><span class="line">cd ~/src</span><br><span class="line">curl -O  http://nginx.org/download/nginx-1.2.1.tar.gz</span><br><span class="line">tar -xzvf nginx-1.2.1.tar.gz</span><br><span class="line">cd nginx-1.2.1</span><br><span class="line"></span><br><span class="line">./configure   --prefix=$HOME/local/nginx  \</span><br><span class="line">--sbin-path=$HOME/local/sbin/nginx \</span><br><span class="line">--conf-path=$HOME/local/etc/nginx.conf  \</span><br><span class="line">--error-log-path=$HOME/logs/user/nginx/error.log \</span><br><span class="line">--http-log-path=$HOME/logs/user/nginx/access.log \</span><br><span class="line">--pid-path=$HOME/local/run/nginx/nginx.pid \</span><br><span class="line">--lock-path=$HOME/local/lock/nginx.lock \</span><br><span class="line">--http-client-body-temp-path=$HOME/tmp/nginx/client/ \</span><br><span class="line">--http-proxy-temp-path=$HOME/tmp/nginx/proxy/  \</span><br><span class="line">--http-fastcgi-temp-path=$HOME/tmp/nginx/fcgi/ \</span><br><span class="line">--with-http_flv_module \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_gzip_static_module</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p> 在Nginx的安装过程中会列出这些配置信息：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Configuration summary</span><br><span class="line">  + using system PCRE library</span><br><span class="line">  + using system OpenSSL library</span><br><span class="line">  + md5: using OpenSSL library</span><br><span class="line">  + sha1: using OpenSSL library</span><br><span class="line">  + using system zlib library</span><br><span class="line"></span><br><span class="line">  nginx path prefix: &quot;/home/deploy/local/nginx&quot;</span><br><span class="line">  nginx binary file: &quot;/home/deploy/local/sbin/nginx&quot;</span><br><span class="line">  nginx configuration prefix: &quot;/home/deploy/local/etc&quot;</span><br><span class="line">  nginx configuration file: &quot;/home/deploy/local/etc/nginx.conf&quot;</span><br><span class="line">  nginx pid file: &quot;/home/deploy/local/run/nginx/nginx.pid&quot;</span><br><span class="line">  nginx error log file: &quot;/home/deploy/logs/user/nginx/error.log&quot;</span><br><span class="line">  nginx http access log file: &quot;/home/deploy/logs/user/nginx/access.log&quot;</span><br><span class="line">  nginx http client request body temporary files: &quot;/home/deploy/tmp/nginx/client/&quot;</span><br><span class="line">  nginx http proxy temporary files: &quot;/home/deploy/tmp/nginx/proxy/&quot;</span><br><span class="line">  nginx http fastcgi temporary files: &quot;/home/deploy/tmp/nginx/fcgi/&quot;</span><br><span class="line">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</span><br><span class="line">  nginx http scgi temporary files: &quot;scgi_temp&quot;</span><br></pre></td></tr></table></figure></li><li><p>添加路径到PATH中： </p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH=/home/you/local/sbin:$PATH</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>创建配置文件：<code>~/local/etc/nginx.conf</code>，在其中添加我们服务的配置：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#user  deploy;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log /home/deploy/logs/user/nginx/error.log;</span><br><span class="line">pid /home/deploy/local/run/nginx/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    upstream rsstornado &#123;</span><br><span class="line">        server 127.0.0.1:8000;</span><br><span class="line">    &#125;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    access_log /home/deploy/logs/user/nginx/access.log;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line">    proxy_read_timeout 200;</span><br><span class="line">    sendfile on;</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1000;</span><br><span class="line">    gzip_proxied any;</span><br><span class="line">    # Relevant docs: http://wiki.nginx.org/HttpGzipModule#gzip_types</span><br><span class="line">    # Enables compression for additional MIME-types besides &quot;text/html&quot;.</span><br><span class="line">    # &quot;text/html&quot; is always compressed.</span><br><span class="line">    gzip_types text/plain text/css text/xml</span><br><span class="line">               application/x-javascript application/xml</span><br><span class="line">               application/atom+xml text/javascript;</span><br><span class="line"></span><br><span class="line">    # Only retry if there was a communication error, not a timeout</span><br><span class="line">    # on the Tornado server (to avoid propagating &quot;queries of death&quot;</span><br><span class="line">    # to all frontends)</span><br><span class="line">    proxy_next_upstream error;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        # server_name  localhost;</span><br><span class="line">        # Allow file uploads</span><br><span class="line">        client_max_body_size 50M;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass_header Server;</span><br><span class="line">            proxy_set_header Host $http_host;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Scheme $scheme;</span><br><span class="line">            proxy_pass http://rsstornado;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 其中，<code>upstream rsstornado</code>指向了我们的rss的端口。</p></li><li><p>之后使用<code>/home/deploy/local/sbin/nginx -t</code>来检查这些配置，期望的输出为：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx: the configuration file /home/deploy/local/etc/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /home/deploy/local/etc/nginx.conf test is successful</span><br></pre></td></tr></table></figure></li><li><p>运行服务：<code>/home/deploy/local/sbin/nginx</code></p></li></ol><p>如果一切顺利，这时，我们在浏览器中输入服务器对应的ip时就可以看到这个web app了。</p><h2 id="添加A纪录"><a href="#添加A纪录" class="headerlink" title="添加A纪录"></a>添加<code>A</code>纪录</h2><p>最后的话需要在自己的dns服务商中添加一条指向服务器ip的<code>A</code>距离，例如在 <a href="http://dns.he.net" target="_blank" rel="noopener">he.net</a> 中添加<br>一条<code>A</code>记录即可。很快，就可以直接使用 <a href="http://rss.daozhang.info" target="_blank" rel="noopener">http://rss.daozhang.info</a> 访问这个app了。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这样，我们就完成了这个server的配置。在我部署这个server的过程中，微信对应的RSS生成的解析实效了，<br>我觉得是因为sogou在其url中添加了一个序列，这个序列是有AES算法得出来的，并且一段时间会换一个key来<br>生成这个序列，所以我暂时也不知道怎么处理这个，有待进一步研究。</p>]]></content>
    
    <summary type="html">
    
      Deploy a tornado projects in production using github, DigitalOcean with nginx and supervisor
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Tornado" scheme="https://blog.qiwihui.com/tags/Tornado/"/>
    
      <category term="DigitalOcean" scheme="https://blog.qiwihui.com/tags/DigitalOcean/"/>
    
      <category term="Nginx" scheme="https://blog.qiwihui.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>使用 Git Hooks 实现项目自动部署</title>
    <link href="https://blog.qiwihui.com/2015/06/10/deploy-projects-with-git-hooks/"/>
    <id>https://blog.qiwihui.com/2015/06/10/deploy-projects-with-git-hooks/</id>
    <published>2015-06-10T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>自动化部署解放双手，发展生产力，更重要的是可以减少部署过程中的错误操作。<br><a id="more"></a></p><p>之前使用git做为我博客的版本控制，使用Github Pages托管我的博客，所以部署方面都交给了github，<br>但是当我要部署另一个web应用时，显然要部署在自己的VPS上，把VPS做为git服务器的同时，每次push<br>代码到服务器上都要手动运行一次脚本更新服务，这样做简直劳神伤力。</p><p>幸运的是Git提供了Hook机制用来帮助我们实现自动部署。Hooks分为客户端和服务端，可以用来处理不同<br>的工作，这些hooks都被存储在 Git 目录下的hooks子目录中，<br>即大部分项目中的<code>.git/hooks</code>。 Git 默认会放置一些脚本样本在这个目录中，除了可以作为hooks使用，<br>这些样本本身是可以独立使用的，这些样本名都是以.sample结尾，必须重新命名。</p><p>这次主要用到服务端的hooks: <code>post-receive</code>。当用户在本地仓库执行<code>git push</code>命令时，服务器上运端<br>仓库就会对应执行<code>git receive pack</code>命令；在所有远程仓库的引用(ref)都更新后，这个钩子就会被调用。<br>与之对应的是<code>pre-receive</code>，这个会在更新之前被调用。</p><p>环境要求：</p><ol><li>要求客户端和服务端都有git环境，而且服务端最好已经部署好了；</li><li>能连上服务器</li></ol><h2 id="0x01-实践"><a href="#0x01-实践" class="headerlink" title="0x01 实践"></a>0x01 实践</h2><p>我们的实践过程会按照下边的过程实施：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+------------------------+          +------------------------+</span><br><span class="line">|                        |          |                        |</span><br><span class="line">|  +-----------------+   |   push   |  +-------------------+ |</span><br><span class="line">|  |local repository |---+----------+-&gt;| remote repository | |</span><br><span class="line">|  +-----------------+   |          |  +-------------------+ |</span><br><span class="line">|                        |          |             |          |</span><br><span class="line">+------------------------+          |             |pull      |</span><br><span class="line">                                    |             V          |</span><br><span class="line">     local machine                  |  +-------------------+ |</span><br><span class="line">                                    |  |     deployment    | |</span><br><span class="line">                                    |  +-------------------+ |</span><br><span class="line">                                    |                        |</span><br><span class="line">                                    +------------------------+</span><br><span class="line"></span><br><span class="line">                                             server</span><br></pre></td></tr></table></figure><h4 id="在server上初始化一个远程裸仓库："><a href="#在server上初始化一个远程裸仓库：" class="headerlink" title="在server上初始化一个远程裸仓库："></a>在server上初始化一个远程裸仓库：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ mkdir remoteRepo</span><br><span class="line">$ <span class="built_in">cd</span> remoteRepo</span><br><span class="line">$ git init --bare webapp.git</span><br></pre></td></tr></table></figure><h4 id="在server上初始化一个本地仓库，做为web-app的代码："><a href="#在server上初始化一个本地仓库，做为web-app的代码：" class="headerlink" title="在server上初始化一个本地仓库，做为web app的代码："></a>在server上初始化一个本地仓库，做为web app的代码：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ mkdir deployment</span><br><span class="line">$ <span class="built_in">cd</span> deployment</span><br><span class="line">$ git <span class="built_in">clone</span> ~/remoteRepo/webapp.git webapp</span><br></pre></td></tr></table></figure><h4 id="为远程仓库添加hook："><a href="#为远程仓库添加hook：" class="headerlink" title="为远程仓库添加hook："></a>为远程仓库添加hook：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/remoteRepo/webapp.git/hooks</span><br><span class="line">$ vim post-receive</span><br><span class="line">$ cat post-receive</span><br></pre></td></tr></table></figure><p><code>post-receive</code>中的命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"># Check the remote git repository whether it is bare</span><br><span class="line">IS_BARE=$(git rev-parse --is-bare-repository)</span><br><span class="line">if [ -z &quot;$IS_BARE&quot; ]; then</span><br><span class="line">    echo &gt;&amp;2 &quot;fatal: post-receive: IS_NOT_BARE&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">unset GIT_DIR</span><br><span class="line"># current user is git</span><br><span class="line">DeployPath=/home/git/deployment/webapp</span><br><span class="line">if [ ! -d $DeployPath ] ; then</span><br><span class="line">    echo &gt;&amp;2 &quot;fatal: post-receive: DEPLOY_DIR_NOT_EXIST: \&quot;$DeployPath\&quot;&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cd $DeployPath</span><br><span class="line">git add . -A &amp;&amp; git stash</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>为<code>post-receive</code>添加可执行权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure><h4 id="为local-machined的本地仓库添加远程仓库源："><a href="#为local-machined的本地仓库添加远程仓库源：" class="headerlink" title="为local machined的本地仓库添加远程仓库源："></a>为local machined的本地仓库添加远程仓库源：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;your-local-repository-folder&gt;</span><br><span class="line">$ git remote add deploy git@&lt;server.ip&gt;:/home/git/remoteRepo/webapp.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># then you need to merge conflict between local changes and deploy/master before you push it.</span></span><br><span class="line"><span class="comment"># 'git merge remotes/deploy/master' or some other git commands.</span></span><br><span class="line"></span><br><span class="line">$ git push deploy master</span><br></pre></td></tr></table></figure><p>或者从头开始创建一个项目：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>这样，当我们在本地完成更新并push到server上时，这些代码就会被自动更新。</p><h2 id="0x02-后来"><a href="#0x02-后来" class="headerlink" title="0x02 后来"></a>0x02 后来</h2><h4 id="改进1"><a href="#改进1" class="headerlink" title="改进1"></a>改进1</h4><p>可以在最初在server上创建裸仓库时使用local machine上的现有项目，即将local machine上<br>的项目仓库导出为裸仓库 — 即一个不包含当前工作目录的仓库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --bare my_project my_project.git</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp -Rf my_project/.git my_project.git</span><br></pre></td></tr></table></figure><p>然后将这个裸仓库移到server上</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ scp -r my_project.git git@&lt;server.ip&gt;:/home/git/remoteRepo</span><br></pre></td></tr></table></figure><p>之后，其他人要进行更新时就可以clone这个项目了：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@&lt;server.ip&gt;:/home/git/remoteRepo/my_project.git</span><br></pre></td></tr></table></figure><h4 id="改进2"><a href="#改进2" class="headerlink" title="改进2"></a>改进2</h4><p>有一种情况是当本地更新了webapp，结果push到远程仓库后这个更新被reset了（虽然我觉得这个问题应该避免，<br>但是还是有可能发生），这是，简单地在hook中使用<code>git push deploy master</code>是无法完成这个过程的，因为<br>远端的代码版本低于deploy端的代码版本，再使用pull的时候就不能实现同步，这时就应该使用另一种方式<br>更新代码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure><p>即<code>git reset</code>把HEAD 指向了新下载的未合并的节点，也就是在local machine上reset之后的。</p><p>参考：<a href="http://blog.csdn.net/a06062125/article/details/11727273" target="_blank" rel="noopener">git 放弃本地修改 强制更新</a></p>]]></content>
    
    <summary type="html">
    
      Deploy projects with Git Hooks between local repository and remote repository on remote machines
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Git" scheme="https://blog.qiwihui.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Dockerizing Scrapy based on MongoDB</title>
    <link href="https://blog.qiwihui.com/2015/06/09/dockerize-scrapy-mongodb-and-python/"/>
    <id>https://blog.qiwihui.com/2015/06/09/dockerize-scrapy-mongodb-and-python/</id>
    <published>2015-06-09T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章的目的是创建一个dokcer镜像用来做为使用爬虫框架Scrapy的环境。<br><a id="more"></a></p><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>使用Python的爬虫框架Scrapy爬取，用非关系型数据库MongoDB存储数据，这个对于一个简单的爬虫系统<br>来说再好不过了，但是遇到一个问题，之前我在本地的机器上话了一小段时间来安装环境，当我想把代码<br>在远程机器上使用时，我又要再装一次环境，blabla，还是弄一个docker镜像吧，方便又实用。</p><h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>鉴于docker官法已经有一个MongoDB的image，我们从这个image开始构建我们的image。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Dockerfile for Scrapy + MongoDB + Python</span><br><span class="line"></span><br><span class="line"># use the official mongodb image</span><br><span class="line">FROM mongo</span><br><span class="line">MAINTAINER Chris Qiu &lt;qwh005007@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">ENV DEBIAN_FRONTEND noninteractive</span><br><span class="line"></span><br><span class="line"># Install Python and libs</span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">    apt-get install -y python python-dev python-pip python-virtualenv python-setuptools &amp;&amp; \</span><br><span class="line">    apt-get install -y build-essential libxml2-dev libxslt1-dev libffi-dev libssl-dev</span><br><span class="line">RUN pip install requests scrapy service_identity pymongo scrapy-mongodb lxml w3lib cssselect twisted beautifulsoup4 queuelib</span><br><span class="line">RUN rm -rf /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">    rm -rf /usr/local/lib/python2.7/dist-packages/requests &amp;&amp; \</span><br><span class="line">    rm -rf /tmp/*</span><br><span class="line"></span><br><span class="line">WORKDIR /data</span><br><span class="line">CMD [&quot;bash&quot;]</span><br><span class="line"></span><br><span class="line"># Expose ports.</span><br><span class="line">#  mongo - 27017: process</span><br><span class="line">#  mongo - 28017: http</span><br><span class="line">#  scrapy Telnet 6023</span><br><span class="line">#  scrapy Web service 6080</span><br><span class="line">EXPOSE 27017 28017 6023 6080</span><br></pre></td></tr></table></figure><p>上面的Dockerfile使用了mongo作为基础镜像，再这个镜像基础上Scrapy以及Python控制mongodb的<br>模块pymongo等相关的模块和lib。</p><h2 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h2><p>写完Dockerfile大可以直接在本地build，但是这会花费很长时间，是的，如果网络差一点，这个就真的很令人<br>伤脑筋，所以我使用docker提供的AutomatedBuild方式来build这个镜像。</p><p>首先将写好的Dockerfile push到github上，然后在Docker Hub中使用<code>Add Repository -&gt; Automated Build</code>，<br>连接上你的github账号，然后选择刚push的Dockerfile项目，然后create images，这样，一段时间之后就可以。</p><p>可以从repository页面中看到building的进度，一但完成就可以使用<code>docker pull &lt;repository-name&gt;</code>获取这个镜像了。</p><p>详细文档可以从这个官方文档中得到：<a href="https://docs.docker.com/docker-hub/builds/" target="_blank" rel="noopener">Automated Builds on Docker Hub</a></p><h2 id="Further"><a href="#Further" class="headerlink" title="Further"></a>Further</h2><p>更进一步，如果要在上面的环境中加入Redis来构成一个分布式的爬虫系统也是非常有意思的。</p><p>The END.</p>]]></content>
    
    <summary type="html">
    
      Make an dockerfile that create an image with Scrapy, MongoDB based on Python2
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Docker" scheme="https://blog.qiwihui.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>树莓派启动时自动连接wifi</title>
    <link href="https://blog.qiwihui.com/2015/04/06/auto-connect-raspberrypi-to-wifi-on-startup/"/>
    <id>https://blog.qiwihui.com/2015/04/06/auto-connect-raspberrypi-to-wifi-on-startup/</id>
    <published>2015-04-06T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章的目的是为了配置树莓派，使其在启动时自动获取静态IP.<br><a id="more"></a></p><h2 id="启动并连接树莓派"><a href="#启动并连接树莓派" class="headerlink" title="启动并连接树莓派"></a>启动并连接树莓派</h2><h4 id="1-启动树莓派并找到其IP地址"><a href="#1-启动树莓派并找到其IP地址" class="headerlink" title="1. 启动树莓派并找到其IP地址"></a>1. 启动树莓派并找到其IP地址</h4><p>把树莓派用网线连接到路由器上，插上SD卡，打开树莓派电源，等大约90秒.<br>在Mac上打开命令行终端，输入<code>arp -a</code>命令，可以看到树莓派的ip地址为 <code>192.168.199.199</code>.<br>当然也可以从路由器后台看到这个IP地址.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ arp -a</span><br><span class="line">? (169.254.99.51) at (incomplete) on en0 [ethernet]</span><br><span class="line">hiwifi.lan (192.168.199.1) at d4:ee:7:20:18:6e on en0 ifscope [ethernet]</span><br><span class="line">raspberrypi.lan (192.168.199.199) at f0:f6:1c:af:7a:28 on en0 ifscope [ethernet]</span><br></pre></td></tr></table></figure><h4 id="2-使用SSH连接树莓派"><a href="#2-使用SSH连接树莓派" class="headerlink" title="2. 使用SSH连接树莓派"></a>2. 使用SSH连接树莓派</h4><p>输入”ssh <a href="mailto:pi@192.168.199.199" target="_blank" rel="noopener">pi@192.168.199.199</a>“, 根据要求输入密码，默认为<code>raspberry</code>.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh pi@192.168.199.199</span><br><span class="line">pi@192.168.199.199s password: </span><br><span class="line">Linux qiwihuisrpi 3.18.7+ <span class="comment">#755 PREEMPT Thu Feb 12 17:14:31 GMT 2015 armv6l</span></span><br><span class="line"></span><br><span class="line">The programs included with the Debian GNU/Linux system are free software;</span><br><span class="line">the exact distribution terms <span class="keyword">for</span> each program are described <span class="keyword">in</span> the</span><br><span class="line">individual files <span class="keyword">in</span> /usr/share/doc/*/copyright.</span><br><span class="line"></span><br><span class="line">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span><br><span class="line">permitted by applicable law.</span><br><span class="line">Last login: Fri Apr 17 14:45:28 2015 from 192.168.199.186</span><br></pre></td></tr></table></figure><h2 id="配置网络连接"><a href="#配置网络连接" class="headerlink" title="配置网络连接"></a>配置网络连接</h2><h4 id="1-设置网络接口文件-etc-network-interfaces"><a href="#1-设置网络接口文件-etc-network-interfaces" class="headerlink" title="1. 设置网络接口文件/etc/network/interfaces"></a>1. 设置网络接口文件<code>/etc/network/interfaces</code></h4><p>编辑这个文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo nano /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>添加如下内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">auto eth0</span><br><span class="line">allow-hotplug eth0</span><br><span class="line">iface eth0 inet dhcp</span><br><span class="line"></span><br><span class="line">auto wlan0</span><br><span class="line">allow-hotplug wlan0</span><br><span class="line">iface wlan0 inet manual</span><br><span class="line"><span class="comment"># iface wlan0 inet dhcp # 如果想自动获取ip</span></span><br><span class="line">wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置静态ip</span></span><br><span class="line">iface wlan0 inet static</span><br><span class="line">address 192.168.199.199</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.199.1</span><br><span class="line"></span><br><span class="line">iface default inet dhcp</span><br></pre></td></tr></table></figure><h4 id="2-设置wpa-supplicant-conf配置文件"><a href="#2-设置wpa-supplicant-conf配置文件" class="headerlink" title="2. 设置wpa_supplicant.conf配置文件"></a>2. 设置<code>wpa_supplicant.conf</code>配置文件</h4><p>编辑文件<code>wpa_supplicant.conf</code>设置连接的网络热点.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo nano /etc/wpa_supplicant/wpa_supplicant.conf</span><br></pre></td></tr></table></figure><p>为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">    ssid=<span class="string">"YOUR_NETWORK_NAME"</span></span><br><span class="line">    psk=<span class="string">"YOU_NETWORK_PASSWORD"</span></span><br><span class="line">    proto=RSN</span><br><span class="line">    key_mgmt=WPA-PSK</span><br><span class="line">    pairwise=CCMP</span><br><span class="line">    auth_alg=OPEN</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中:</p><ul><li><code>proto</code> 可以是 <code>RSN</code> (WPA2) 或者 <code>WPA</code> (WPA1).</li><li><code>key_mgmt</code> 可以是 <code>WPA-PSK</code> (大部分) 或者 <code>WPA-EAP</code> (企业网络)</li><li><code>pairwise</code> 可以是 <code>CCMP</code> (WPA2) 或者 <code>TKIP</code> (WPA1)</li><li><code>auth_alg</code> 常为 <code>OPEN</code>, 其他可选为 <code>LEAP</code> 和 <code>SHARED</code></li></ul><p>重启树莓派，之后就会自动连上wifi了.</p>]]></content>
    
    <summary type="html">
    
      树莓派启动时自动连接wifi
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Raspberry Pi" scheme="https://blog.qiwihui.com/tags/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title>在VirtualBox安装Arch Liux初步指南</title>
    <link href="https://blog.qiwihui.com/2015/01/03/install-arch-linux-in-virtualbox/"/>
    <id>https://blog.qiwihui.com/2015/01/03/install-arch-linux-in-virtualbox/</id>
    <published>2015-01-03T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>简单地写一下在VirtualBox上安装Arch Linux的过程，以此为在PC上安装做准备。在PC上安装的过程和下面描述的基本一致。<br><a id="more"></a></p><p>##0x00 准备</p><ol><li><p>下载iso文件：在Arch官网上<a href="https://www.archlinux.org/download/" target="_blank" rel="noopener">下载</a>最新的镜像，这里<br>我选用了<a href="http://mirrors.163.com/archlinux/iso/2015.01.01/" target="_blank" rel="noopener">163.com</a>节点的资源，下载archlinux-2015.01.01-dual.iso；</p></li><li><p>检查文件的完整性：在MAC中使用md5或者sha1检验文件的完整行，并和下载站点提供的值进行比较。</p> <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ openssl sha1 archlinux-2014.12.01-dual.iso </span><br><span class="line">SHA1(archlinux-2014.12.01-dual.iso)= 86085153f97f0097fd0a02496e67cf85138c1ba5</span><br><span class="line"></span><br><span class="line">$ md5 archlinux-2014.12.01-dual.iso </span><br><span class="line">MD5 (archlinux-2014.12.01-dual.iso) = 667ed3c5e935666edfd54a2271e05b72</span><br></pre></td></tr></table></figure></li></ol><p>##0x01 创建虚拟机</p><ol><li><p>给虚拟机一个名字<br> <img src="/media/files/2015/Jan/0-NameAndOperatingSystem.png"><img></p></li><li><p>内存：最小为256MB<br> <img src="/media/files/2015/Jan/1-MemorySize.png"><img></p></li><li><p>创建新的虚拟磁盘<br> <img src="/media/files/2015/Jan/2-HardDrive.png"><img></p></li><li><p>文件类型<br> <img src="/media/files/2015/Jan/3-HardDriveFileType.png"><img></p></li><li><p>动态分配<br> <img src="/media/files/2015/Jan/4-StorageOnPhysicalHardDrive.png"><img></p></li><li><p>文件位置和大小，最小10GB<br> <img src="/media/files/2015/Jan/5-FileLocationAndSize.png"><img></p></li><li><p>如果要安装桌面环境的话就勾选<code>Enable 3D Acceleration</code><br> <img src="/media/files/2015/Jan/6-Enable3DAcceleration.png"><img></p></li><li><p>第一次启动虚拟机时，选取之前下载的ISO文件<br> <img src="/media/files/2015/Jan/7-SelectISOFile.png"><img></p></li></ol><p>##0x01 开始安装</p><ol><li><p>选择32位或者64位Arch<br> <img src="/media/files/2015/Jan/8-BootArchLinux.png"><img></p><p> 一旦看到如下提示，就可以开始进行配置了：<br> <img src="/media/files/2015/Jan/9-Command.png"><img></p></li><li><p>更改键盘布局和设置语言：</p><p> 默认键盘布局为<code>us</code>，非us布局可以用如下命令修改：</p> <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># loadkeys layout</span></span><br></pre></td></tr></table></figure><p> layout可以是<code>uk</code>, <code>dvorak</code>等。设置语言：</p></li><li><p>磁盘分区</p><p> 先看一下磁盘状态：</p> <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls /dev</span></span><br></pre></td></tr></table></figure><p> 开始啦，一般创建四个分区：<code>/</code>, <code>/boot</code>, <code>/home</code>, <code>swap</code></p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># gdisk /dev/sda</span><br></pre></td></tr></table></figure><p> 当出现下面命令时, 开始分区，一下以<code>/boot</code>分区为例：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Command (? for help):</span><br></pre></td></tr></table></figure><p> a. 创建新分区：’n’<br> b. 分区号码：回车默认从0开始递增<br> c. “first sector”: 回车默认从上一个分区结束处开始，初始为0<br> d. “last sector”: ‘+250MB’<br> e. “hex code”: 回车默认（8300 为”Linux File System”），<code>swap</code>分区输入8200, 见<a href="http://www.basicconfig.com/hex_codes_system_id" target="_blank" rel="noopener">这儿</a></p><p> 依次给<code>swap</code>分配’+1G’（和分配的RAM一样大），<code>/boot</code>分配’+8G’，<code>/home</code>分配’+1G’，再次看一下磁盘的状态，可以看到已经分配好了，<br> 键入’w’并回车即可保存修改。</p></li><li><p>格式化分区</p><p> 再次回到命令行：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@archiso ~ #</span><br></pre></td></tr></table></figure><p> 格式化分区：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkfs -t ext4 /dev/sda1</span><br><span class="line"># mkfs -t ext4 /dev/sda3</span><br><span class="line"># mkfs -t ext4 /dev/sda4</span><br><span class="line"></span><br><span class="line"># mkswap /dev/sda2</span><br></pre></td></tr></table></figure></li><li><p>挂载新分区</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># swapon /dev/sda2</span><br><span class="line"></span><br><span class="line"># mount /dev/sda3 /mnt</span><br><span class="line"># cd /mnt</span><br><span class="line"># mkdir boot home</span><br><span class="line"># mount /dev/sda1 boot</span><br><span class="line"># mount /dev/sda4 home</span><br></pre></td></tr></table></figure></li><li><p>安装Arch</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd /</span><br><span class="line"># pacstrap /mnt base base-devel</span><br></pre></td></tr></table></figure></li><li><p>生成<code>fstab</code>文件</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># genfstab -p /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure><p> 可以看看fstab里面的内容：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># more /mnt/etc/fstab</span><br></pre></td></tr></table></figure></li><li><p>初始化安装Boot Loader</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pacstrap /mnt syslinux</span><br></pre></td></tr></table></figure></li><li><p>配置安装</p><p> 运行以下命令：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># arch-chroot /mnt</span><br></pre></td></tr></table></figure><p> 得到：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh-4.2#</span><br></pre></td></tr></table></figure><p> 这个shell很基础，用Bash也许更好些：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># bash</span><br></pre></td></tr></table></figure><p> 得到：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@archiso /]#</span><br></pre></td></tr></table></figure><p> 设置语言：</p> <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nano /etc/locale.conf</span></span><br></pre></td></tr></table></figure><p> 添加：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LANG=&quot;en_US.UTF-8&quot;</span><br></pre></td></tr></table></figure> <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nano /etc/locale.gen</span></span><br></pre></td></tr></table></figure><p> 将下面两行前面<code>#</code>去除：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">de_DE.UTF-8 UTF-8</span><br></pre></td></tr></table></figure><p> 完成语言设置：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># locale-gen</span><br></pre></td></tr></table></figure><p> 设置时间：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ln -s /usr/share/zoneinfo/&lt;your_state&gt;/&lt;your_city&gt; /etc/localtime</span><br></pre></td></tr></table></figure><p> 比如我设置的是：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ln -s /usr/share/zoneinfo/Asia/Chongqing /etc/localtime</span><br></pre></td></tr></table></figure><p> 改hostname：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># nano /etc/hostname</span><br></pre></td></tr></table></figure></li><li><p>完成Bootloader安装</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd /boot/syslinux/</span><br></pre></td></tr></table></figure><p> 打开syslinux.cfg文件，找到”comboot modules”一段：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># more syslinux.cfg</span><br></pre></td></tr></table></figure><p> 将其中列举的文件copy到本地，同时还要加上’libutil.c32’:</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cp /usr/lib/syslinux/bios/menu.c32 .</span><br><span class="line"># cp /usr/lib/syslinux/bios/vesamenu.c32 .</span><br><span class="line"># cp /usr/lib/syslinux/bios/chain.c32 .</span><br><span class="line"># cp /usr/lib/syslinux/bios/hdt.c32 .</span><br><span class="line"># cp /usr/lib/syslinux/bios/reboot.c32 .</span><br><span class="line"># cp /usr/lib/syslinux/bios/poweroff.c32 .</span><br><span class="line"># cp /usr/lib/syslinux/bios/libutil.c32 .</span><br></pre></td></tr></table></figure><p> 一旦完成上述设置，</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># extlinux --install /boot/syslinux</span><br><span class="line"># dd conv=notrunc bs=440 count=1 if=/usr/lib/syslinux/bios/gptmbr.bin of=/dev/sda</span><br><span class="line"># mkinitcpio -p linux</span><br></pre></td></tr></table></figure></li><li><p>完成安装</p><p>最后，更改root密码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># passwd</span><br></pre></td></tr></table></figure><p>输入两次<code>exit</code>退回到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@archiso /]#</span><br></pre></td></tr></table></figure><p>umount所有的分区：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># umount /mnt/boot</span><br><span class="line"># umount /mnt/home</span><br><span class="line"># swapoff /dev/sda2</span><br><span class="line"># umount /mnt</span><br></pre></td></tr></table></figure><p>在重启之前最后一步，设置<code>/boot</code>分区的<a href="http://en.wikipedia.org/wiki/BIOS" target="_blank" rel="noopener">BIOS</a>标识为’bootable’：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sgdisk /dev/sda --attributes=1:set:2</span><br></pre></td></tr></table></figure></li><li><p>重启Arch</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># reboot</span><br></pre></td></tr></table></figure><p>重启之后会再次进入CD启动，这时，去除安装CD，再次重启：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Devices &gt; CD/DVD Devices &gt; Remove disk from virtual drive</span><br></pre></td></tr></table></figure><p>等待一小会：</p><p><img src="/media/files/2015/Jan/10-ArchLinux.png"><img></p><p>Congradulations!</p></li><li><p>后续工作</p><p>链接网络：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dhcpcd</span><br></pre></td></tr></table></figure><p>安装’sudo’：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pacman -S sudo</span><br></pre></td></tr></table></figure><p>添加’sudoer’:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># nano /etc/sudoers</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##</span><br><span class="line">## User privilege specification</span><br><span class="line">##</span><br><span class="line">root ALL=(ALL) ALL</span><br><span class="line">qiwihui ALL=(ALL) ALL</span><br></pre></td></tr></table></figure><p>保存，并log out：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># exit</span><br></pre></td></tr></table></figure><p>以新的ID和密码重新登录。</p><p>最后，每次登录的时候自动获取ip：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo systemctl enable dhcpcd@eth0.service</span><br></pre></td></tr></table></figure></li></ol><p>这样最基本的Arch Linux就好了，Desktop Environment就不装了。</p><h2 id="0x02-参考文档"><a href="#0x02-参考文档" class="headerlink" title="0x02 参考文档"></a>0x02 参考文档</h2><ul><li><a href="https://wiki.archlinux.org/index.php/Beginners%27_guide" target="_blank" rel="noopener">Arch Linux Beginners’ guide</a></li><li><a href="https://wiki.archlinux.org/index.php/Installation_guide" target="_blank" rel="noopener">Arch Linux Installation Guide</a></li><li><a href="http://wideaperture.net/blog/?p=3851" target="_blank" rel="noopener">A Guide to Installing Arch in VirtualBox</a></li></ul>]]></content>
    
    <summary type="html">
    
      VirtualBox安装Arch Liux指南
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Arch linux" scheme="https://blog.qiwihui.com/tags/Arch-linux/"/>
    
      <category term="Virtualbox" scheme="https://blog.qiwihui.com/tags/Virtualbox/"/>
    
  </entry>
  
  <entry>
    <title>年度总结 - 2014年的点点滴滴</title>
    <link href="https://blog.qiwihui.com/2014/12/13/a-summary-of-2014/"/>
    <id>https://blog.qiwihui.com/2014/12/13/a-summary-of-2014/</id>
    <published>2014-12-13T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>在2014年还有15天就结束的时候，总结一下自己在2014年的工作生活和学习。2014年的故事比2013年少，但是琐碎的学习项目和整理多了很多。<br><a id="more"></a></p><p><strong> 学习环境 </strong></p><ul><li>feedly: rss聚合阅读</li><li>Evernote: 做笔记</li><li>Pocket: 稍后阅读</li><li>Trello: 项目管理</li><li>blog: 知识整理和创造</li><li>基本实现Windows, Ubuntu, Android, Mac, iOS平台之间数据同步</li></ul><p><strong> Linux </strong></p><ul><li>bash脚本初步</li><li>Arch Linux安装和基本配置</li><li>Raspberry Pi: LAMP</li><li>gunicorn使用</li><li>nginx入门</li></ul><p><strong> Vim + Git </strong></p><ul><li>使用YCM</li><li>dotfile(e.g. .vimrc, …)备份以及工作环境快速配置</li><li>git以及github常用基础功能</li></ul><p><strong> C </strong></p><ul><li>2048 in C (其实没完成)</li><li>PDT(a tiny card game demo) in C</li></ul><p><strong> Python </strong></p><ul><li>PDT in python </li><li>初学Django</li><li>Virtualenv虚拟python环境</li><li>pip</li></ul><p><strong> Web </strong></p><ul><li>使用Jekyll</li><li>github pages</li><li>博客采用Markdown</li><li>Html5 + CSS3基础</li><li>OAuth 2.0</li><li>全平台Cross the Great Firewall</li><li>Tor</li><li>网络基础</li></ul><p><strong> Mac/iOS </strong></p><ul><li>Swift语言入门</li><li>AFNetworking框架</li><li>ShanbayWords.app Demo</li><li>SwiftWeather.app Demo</li><li>iOS Frameworks概览</li><li>cocoapods管理类库</li><li>Html5 web离线app</li></ul><p><strong> 读书 </strong></p><ul><li>《开源世界旅行手册》</li><li><em>Dive into Python3</em></li><li><em>Getting started with OAuth 2.0</em></li><li><em>Getting Real</em></li><li>《黑客与画家》</li><li>《算法概论》（<em> Algorithms </em>，PDV）</li><li>《一个陌生女人的来信》</li><li>《饥饿游戏》（I, II,III）</li><li>……</li></ul><p><strong> 设备 </strong></p><ul><li>2014年新入4台设备：（略）。</li></ul><p><strong> 生活 </strong></p><ul><li>六月初去了北戴河，然后是泰山，七月嵩山，恒山和九月西安、华山。</li><li>Color Run</li><li>庆幸只发烧了两天，继续保持。</li></ul><p>以上就像列家常一样把2014年能记得的东西都写了个遍，那么问题来了，挖掘机…不：</p><ol><li>很多事情不能及时记录：所有的事情更像是五月份之后做的，五月之前的基本没记住。</li><li>时间花销记录不清楚：总感觉事情多，但是却不知道时间用到哪边去了。</li><li>看的书太少：没有2013年多，成系统的书少，非技术书类少，2014年主要倾向于开发文档和碎片化的文章，对知识和认识的系统化贡献少。</li></ol><p>因此2015年在这写方面确实要改善和加强。故制定2015年的主要目标如下（比较宽的目标，无先后，要细分）：</p><ol><li><p>规划：</p><ul><li>每周有小结，三月一次书面记录和总结</li><li>日常时间花销记录（e.g. RescueTime）</li><li>学会记账</li><li>静坐和冥想（谁用谁知道！）</li><li>读书以及读书笔记，锻炼 -&gt; 100日行动</li></ul></li><li><p>学习：</p><ul><li>Python: 常见标准库的了解和重点学习</li><li>Swift: GUI基本设计，Cocoa Touch layer基本</li><li>网络基础</li><li>算法和数据结构：基本算法和数据结构的理解和掌握</li><li>数学知识的回顾和加强</li><li>英语加强，托福</li></ul></li><li><p>杂项</p><ul><li>继续未完成的旅行：衡山，以及青海。</li></ul></li></ol><p>2015年想来事情也是比较多的，加油！</p><p>Wait, wait! 虽然2015年还有15天到来，但是可以做的事情还是很多，好好想想，and期待惊喜的发生！</p><p>P.S. 明年总结的时候这个也会是比较二的一篇，除非我没有进步！</p><p>2013年的总结：<a href="/2013/11/30/the-past-one-year-2013/">年度总结 - 过去的2013年</a>。突然觉得这个好矫情啊!!</p>]]></content>
    
    <summary type="html">
    
      2014末尾，总结自己2014你啊的工作学习生活
    
    </summary>
    
      <category term="生活" scheme="https://blog.qiwihui.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="总结" scheme="https://blog.qiwihui.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>翻译 - 理解python索引和切片</title>
    <link href="https://blog.qiwihui.com/2014/12/09/understanding-indices-and-slicing/"/>
    <id>https://blog.qiwihui.com/2014/12/09/understanding-indices-and-slicing/</id>
    <published>2014-12-09T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.387Z</updated>
    
    <content type="html"><![CDATA[<p>许多初次接触Python的人对于索引都会有同样的反应：这太奇怪了。在Python的列表，字符串和条件语句中都充斥着索引，但在我们习惯他们之前，<br>这些都会是我们程序的错误来源。因此，让我们硬着头皮上吧！<br><a id="more"></a></p><p>这片文章会写得很慢，为了解释一些基础和默认的东西。</p><p>我们会使用字符串切片举例，因为这事我们首先接触的，不过这对于列表切片和设定范围是一样的。我们有：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'0123456789'</span></span><br></pre></td></tr></table></figure><p>其中第k个位置的字符为k。</p><p>我们使用如下方式对a进行切片：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = a[start:stop:step]</span><br></pre></td></tr></table></figure><p>或者直接地：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'0123456789'</span>[start:stop:step]</span><br></pre></td></tr></table></figure><p>在Python中，字符串和指向字符串的变量都是对象，所以都可以进行切片（事实上，Python中所有东西都是对象：数字，变量，字符串，函数，文件）。</p><p>有三件事情需要记住：</p><ol><li><code>start</code> 是我们想要的第一项（当然）</li><li><code>stop</code> 是我们第一个不想要的项</li><li><code>step</code> 可以是正整数，也可以是负数，定义了向前（从第一个位置到向末尾）还是向后（从最后一个位置向开始位置）索引。</li></ol><p>一个小提醒：但我们学习python之外其他语言的时候，stop的定义是Python索引和切片在熟悉其语言的程序员看来如此奇怪的原因之一。在大部分计算机<br>语言中，stop应该是“我们需要的最后一项”。不管这个定义是否比其他语言更好或者更坏，Python的确是不寻常的一种语言。</p><p>在索引中使用负数是python另一个奇怪的特性。在大部分C衍生的语言（C/C++/C#，Java,，Javascript等）中，负数索引是不合法的，因为索引表示从<br>字符串初始内存地址的偏移，所以负数索引会指向字符串开始位置之前的位置（更详细的请参见这篇博客：<br><a href="http://blog.daozhang.info/Why-does-indexing-begin-at-0/" target="_blank" rel="noopener">为什么python中索引从0开始</a>）。然而，Python并不是唯一使用负数索引的语言，比如，<br><a href="http://www.tutorialspoint.com/perl/perl_arrays.htm" target="_blank" rel="noopener">Perl</a>像python一样使用负数索引来表示从字符串末尾开始的位置；<br><a href="http://www.r-tutor.com/r-introduction/vector/vector-index" target="_blank" rel="noopener">R</a>语言面向统计，A[-i]表示所有除第i位置的值。不过，只有很少的语言<br>在任意情况下使用负数索引。</p><p>现在让我们回到Python索引上。</p><p><strong> 使用正数和负数索引 </strong></p><p>我们可以使用正整数表示字符串中的位置，由字符串开头从0开始计数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = <span class="string">"my mistress' eyes are nothing like the sun"</span></span><br><span class="line">     ^         ^                              ^</span><br><span class="line">    b[<span class="number">0</span>]      b[<span class="number">10</span>]                          b[<span class="number">41</span>]</span><br></pre></td></tr></table></figure><p>我们用len()函数来获取一个字符串的长度。因此，b有42个字符，故len(b)=42。因为b最后一个字符是<code>b[41]</code>，所以<code>len(b)</code>比b字符串最后位置索引多1。</p><p>有些时候这对从字符串末尾开始找字符是很有帮助的。所以我们用负数，从字符串末尾开始计数，即从-1（不是0）：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = <span class="string">"my mistress' eyes are nothing like the sun"</span></span><br><span class="line">     ^         ^                              ^</span><br><span class="line">   b[<span class="number">-42</span>]   b[<span class="number">-32</span>]                          b[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>从末尾看的最后一个字符串是b[-42]，那么它前面的位置会是-len(b)-1 = -43。</p><p>所以，在这个例子中<code>len(b) = 42</code>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b[<span class="number">0</span>]        = b[-len(b)] = b[<span class="number">-42</span>] = <span class="string">'m'</span></span><br><span class="line">b[len(b)<span class="number">-1</span>] = b[<span class="number">-1</span>]      = b[<span class="number">41</span>]  = <span class="string">'n'</span></span><br><span class="line">b[<span class="number">10</span>]       = b[<span class="number">-32</span>]              = <span class="string">'s'</span></span><br></pre></td></tr></table></figure><p>并且一般地，</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b[k]        = b[-len(b)+k]</span><br></pre></td></tr></table></figure><p>hmm, 这很令人疑惑。我们需要了解索引的一般机制，但是，我们不需要记住这些边界值，这些是python中默认的。</p><p>默认值是引用一个变量的时候，我们没有指定明确的值。这就和我们“默认地”称呼一位女性为女士(<a href="http://en.wikipedia.org/wiki/Ms." target="_blank" rel="noopener">Ms.</a>)一样。如果我们没有被告知需要称呼她为太太（Mrs.）或者小姐(Miss），或者如果我们忽略了实际的尊称，我们降退回到“默认”值。Python对于很常用的<code>start</code>, <code>stop</code> and <code>step</code>都有默认值。</p><p><strong> 如果<code>step</code>是正数，我们向前移动（如果<code>step</code>值为空，则默认为+1）</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">2</span>:<span class="number">6</span>] = <span class="string">'0123456789'</span>[<span class="number">2</span>:<span class="number">6</span>:<span class="number">1</span>] = <span class="string">'2345'</span></span><br></pre></td></tr></table></figure><p>如上例，我们想要的第一个值在第二个位置，第一个不想要的在第6个位置。</p><p>更进一步，我们从字符串末尾开始看：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">-8</span>:<span class="number">-4</span>] = <span class="string">'0123456789'</span>[<span class="number">-8</span>:<span class="number">-4</span>:<span class="number">1</span>] = <span class="string">'2345'</span></span><br></pre></td></tr></table></figure><p>我们想要的第一个值是从后数第8个（2），第一个不想要的是从后数第4个（6）。</p><p>所以，对于任意正数<code>step</code>，我们有如下的默认值：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">     |-&gt; -&gt; -&gt;|</span><br><span class="line">a = <span class="string">'0123456789'</span></span><br><span class="line">     ^         ^</span><br><span class="line">  start:<span class="number">0</span>   stop: len(a), i.e, 超出了字符串的末尾的位置</span><br></pre></td></tr></table></figure></p><p>所以：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[:]    = a[<span class="number">0</span>:len(a):<span class="number">1</span>] = <span class="string">'0123456789'</span> <span class="comment"># a +1 step 默认</span></span><br><span class="line">a[::<span class="number">2</span>]  = a[<span class="number">0</span>:len(a):<span class="number">2</span>] = <span class="string">'02468'</span>      <span class="comment"># 所有偶数位置</span></span><br><span class="line">a[<span class="number">1</span>::<span class="number">2</span>] = <span class="string">'13579'</span>                      <span class="comment"># 所有奇数位置</span></span><br><span class="line">a[::<span class="number">3</span>]  = <span class="string">'0369'</span>                       <span class="comment"># 所有3的倍数位置</span></span><br></pre></td></tr></table></figure><p>所以，只要我们从字符串头部或者尾部使用切片，Python都会使用默认值。</p><p><strong> 如果<code>step</code>是负数，而我们从后往前数</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">6</span>:<span class="number">2</span>:<span class="number">-1</span>] = <span class="string">'0123456789'</span>[<span class="number">6</span>:<span class="number">2</span>:<span class="number">-1</span>] = <span class="string">'6543'</span></span><br></pre></td></tr></table></figure><p>我们需要的第一个值在第六个位置，不需要的第一个值在第二个位置。</p><p>或者进一步，</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">-4</span>:<span class="number">-8</span>:<span class="number">-1</span>] = <span class="string">'0123456789'</span>[<span class="number">-4</span>:<span class="number">-8</span>:<span class="number">-1</span>] = <span class="string">'6543'</span></span><br></pre></td></tr></table></figure><p>我们想要的第一个值是从后数第4个（6），第一个不想要的是从后数第8个（2）。</p><p>注意到我们可以在索引中使用正数或者负数，以及从前或者从后搜寻字符串，所以我们甚至可以将它们混合起来使用：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">6</span>:<span class="number">-8</span>:<span class="number">-1</span>] = <span class="string">'6543'</span></span><br><span class="line">a[<span class="number">-4</span>:<span class="number">2</span>:<span class="number">-1</span>] = <span class="string">'6543'</span></span><br></pre></td></tr></table></figure><p>有时候这样的混合式非常方便的：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">'&lt;a href="http://udacity.com"&gt;'</span>[<span class="number">9</span>:<span class="number">-2</span>]</span><br><span class="line">    = <span class="string">'http://udacity.com'</span></span><br></pre></td></tr></table></figure><p>我们需要记住的是使用负数索引不意味着我们就是向后移动，只是我们从字符串末尾开始索引。向前还是向后是仅由step变量的符号决定的。</p><p>为了向后移动，我们需要在我们的意识中反转这个字符串：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">     |&lt;- &lt;- &lt;-|</span><br><span class="line">a = <span class="string">'0123456789'</span></span><br><span class="line">    ^         ^</span><br><span class="line">    ^      start:<span class="number">-1</span></span><br><span class="line">stop:在字符串开始位置之前的位置</span><br></pre></td></tr></table></figure><p>所以：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[::<span class="number">-1</span>] = a[<span class="number">-1</span>::<span class="number">-1</span>] = <span class="string">'9876543210'</span> <span class="comment"># 我们只是学习如何反转字符串</span></span><br><span class="line">a[::<span class="number">-2</span>] = a[<span class="number">-1</span>:-len(a)<span class="number">-1</span>:<span class="number">-2</span>] = <span class="string">'97531'</span></span><br><span class="line">a[::<span class="number">-3</span>] = a[<span class="number">-1</span>:-len(a)<span class="number">-1</span>:<span class="number">-3</span>] = <span class="string">'9630'</span></span><br></pre></td></tr></table></figure><p>再一次，只要我们从字符串的头部或者尾部对字符串切片，我们可以使用空的start和stop变量，Python会使用默认值。</p><p>只用6个字符就反转了一个字符串，厉害吧！可惜的是这个只在Python中有用，许多其他的语言并不支持这种方式。这类问题只是用来是我们熟悉这种结构，不只是在Python中，也包括其他语言在内。因此，考虑需要反转字符串的这类问题（比如回文问题）可以让我们学习如何使用循环，索引，并且尝试不同切片来解决这些问题。这样，你就有两手准备了。</p><hr><p>所以现在，我们已经掌握了Python的索引，应该能明白底下这些了：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'0123456789'</span>[<span class="number">8</span>:<span class="number">2</span>:<span class="number">-2</span>]   = <span class="string">'864'</span></span><br><span class="line"><span class="string">'0123456789'</span>[<span class="number">8</span>:<span class="number">-8</span>:<span class="number">-2</span>]  = <span class="string">'864'</span></span><br><span class="line"><span class="string">'0123456789'</span>[<span class="number">-2</span>:<span class="number">2</span>:<span class="number">-2</span>]  = <span class="string">'864'</span></span><br><span class="line"><span class="string">'0123456789'</span>[<span class="number">-2</span>:<span class="number">-8</span>:<span class="number">-2</span>] = <span class="string">'864'</span></span><br></pre></td></tr></table></figure><p>Good luck!</p><p>原文在<a href="http://forums.udacity.com/questions/2017002/python-101-unit-1-understanding-indices-and-slicing" target="_blank" rel="noopener">这儿</a></p>]]></content>
    
    <summary type="html">
    
      Python索引和切片
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://blog.qiwihui.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>翻译 - 为什么python中索引从0开始</title>
    <link href="https://blog.qiwihui.com/2014/12/08/Why-does-indexing-begin-at-0/"/>
    <id>https://blog.qiwihui.com/2014/12/08/Why-does-indexing-begin-at-0/</id>
    <published>2014-12-08T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.383Z</updated>
    
    <content type="html"><![CDATA[<p>在Python中字符串索引从0开始而不是从1开始是合乎逻辑的选择，因为python是用C语言写的，做为C的主要数据结构，数组是从0开始索引的。这在C中<br>是很基础的，以至于如果改变索引从1开始将会需要大量的工作。<br><a id="more"></a></p><p><strong> 1) 那么下一个问题：为什么在C中索引从0开始？</strong></p><p>C语言中的主要数据结构是数组，数组时一些相同类型元素的集合。在C中，字符串时字符数组，如果你想存储字符串“HELLO”，C会在内存中寻找一块连<br>续的地方存储这些字符。比如，从内存地址7000开始存储，那么这个字符串在内存中的地址就是：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="number">7000</span> <span class="string">'H'</span></span><br><span class="line"><span class="number">7001</span> <span class="string">'E'</span></span><br><span class="line"><span class="number">7002</span> <span class="string">'L'</span></span><br><span class="line"><span class="number">7003</span> <span class="string">'L'</span></span><br><span class="line"><span class="number">7004</span> <span class="string">'O'</span></span><br><span class="line">7005 '/0'</span><br></pre></td></tr></table></figure><p>你可能会问：最后一个’/0’是什么？这个不是字符串”HELLO”的一部分。这个称作空值终止字符串。我们知道字符串从7000开始，但是我们不知道在哪里<br>结束，因此C在字符串的末尾加了一个空值使得我们遍历字符串时知道它在哪里结束。让我们再回到原来的问题。</p><p>让我们认真看一下这些字符的地址，如果我们想要这个字符串的第一个字符，我们要做的就是得到这个字符串的初始内存地址。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="string">'H'</span> 地址在 <span class="number">7000</span> 因为字符串从 <span class="number">7000</span> 开始</span><br></pre></td></tr></table></figure><p>如果我们要字符’E’，只需要地址偏移加1:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="string">'E'</span> is at <span class="number">7000</span>+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>我们可以是用偏移来得到所以的字符：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="string">'H'</span> is at <span class="number">7000</span> + <span class="number">0</span></span><br><span class="line"><span class="string">'E'</span> is at <span class="number">7000</span> + <span class="number">1</span></span><br><span class="line"><span class="string">'L'</span> is at <span class="number">7000</span> + <span class="number">2</span></span><br><span class="line"><span class="string">'L'</span> is at <span class="number">7000</span> + <span class="number">3</span></span><br><span class="line"><span class="string">'O'</span> is at <span class="number">7000</span> + <span class="number">4</span></span><br></pre></td></tr></table></figure><p>啊哈！看到了吗？我们很自然地会使得索引等于便宜，这样我们就可以找到数组中的所有元素。<br>如果我们赋值如下：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">greeting = 'HELLO'</span><br></pre></td></tr></table></figure><p>则</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">greeting[<span class="number">0</span>] = <span class="string">'H'</span></span><br><span class="line">greeting[<span class="number">1</span>] = <span class="string">'E'</span></span><br><span class="line">greeting[<span class="number">2</span>] = <span class="string">'L'</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>所以，这是我们问题的回答。字符从0开始索引因为这表示了相对于字符串开始位置的偏移。</p><p><strong> 2) 我还是认为数组的第一个元素应该从1开始，这样错了吗？</strong></p><p>不，一点也不。有很多语言都会设计成这样：字符串的第一个元素的位置必须为1。一个很常见的例子是Matlab，它的索引从1开始。在这个例子中，<br>Matlab是基于Fotran的，Fotran的数组索引从1开始，所以，改变时没有意义的。</p><p>看到趋势了吗？语言往往从他们的父辈中继承许多基本的特性。由C衍生出来的语言倾向于从0开始索引，比如C++，objective C，Java，Python， Perl，<br>Javascript和其它许多语言，<a href="http://en.wikipedia.org/wiki/List_of_C-based_programming_languages" target="_blank" rel="noopener">看这</a>。有Fortran衍生出来的语言则往往从1开始<br>所以，就像Matalb和SimScript一样。</p><p>当然，这些继承不是必须的。比如，相对于其他许多C衍生的语言，Python使用缩进来表示结构，而不是花括号。恕我直言，这很不寻常，但也不失为一个好选择，<br>因为为了清楚，结构里的语句也会缩进，从这点看，花括号或者其他分隔符都显得多余了。</p><p><strong> 3) 哪一个更好呢，从0开始还是从1开始？</strong></p><p>都不好。如果需要，使用另一个索引开始值也是相对简单的。然而，有一些算法自然是从0或者1开始的，没有其他的，所以对于这些情况下，在实现上略有不同。<br>比如，二叉查找树从1开始，所以，在Python中，我们可以使用一个从0开始的数组活着列表，然后忽略第一个元素。在这篇<br><a href="http://forums.udacity.com/questions/2006322/where-python-is-illogical?page=1&amp;focusedAnswerId=2022504#2022504" target="_blank" rel="noopener">博客</a>中，其中描述了我们可以强制C中的数组<br>从1开始索引，以及C开发者社区是怎样收到一本趋势读者也这样做的书。</p><p>原文在<a href="http://forums.udacity.com/questions/100086491/why-does-indexing-begin-at-0?page=1&amp;focusedAnswerId=100086607#100086607" target="_blank" rel="noopener">这儿</a>。</p>]]></content>
    
    <summary type="html">
    
      为什么python中索引从0开始
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://blog.qiwihui.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>在Swift中使用AFNetworking框架</title>
    <link href="https://blog.qiwihui.com/2014/11/20/using-AFNetworking/"/>
    <id>https://blog.qiwihui.com/2014/11/20/using-AFNetworking/</id>
    <published>2014-11-20T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.383Z</updated>
    
    <content type="html"><![CDATA[<p>如何在Swift项目中使用<a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="noopener">AFNetworking</a>框架？<br><a id="more"></a></p><ol><li><p>安装<a href="http://cocoapods.org/" target="_blank" rel="noopener">CocoaPods</a></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo gem install cocoapods</span><br></pre></td></tr></table></figure></li><li><p>安装AFNetworking。在项目的根目录中创建Podfile文件，写入如下内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &apos;https://github.com/CocoaPods/Specs.git&apos;</span><br><span class="line">platform :ios, &apos;8.0&apos;</span><br><span class="line">pod &apos;AFNetworking&apos;</span><br></pre></td></tr></table></figure><p>然后安装AFNetworking：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure></li><li><p>在项目中创建一个新的头文件，引用AFNetworking框架：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &lt;AFNetworking/AFNetworking.h&gt;</span><br></pre></td></tr></table></figure></li><li><p>在<code>Build Settings-&gt;Objective-C Bridging Header</code>中引用这个头文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yourappname/yourbridgefile.h</span><br></pre></td></tr></table></figure><p>这样就可以使用AFNetworking了：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> manager = <span class="type">AFHTTPRequestOperationManager</span>()</span><br><span class="line">manager.<span class="type">GET</span>(  </span><br><span class="line">  <span class="string">"http://headers.jsontest.com"</span>,</span><br><span class="line">  parameters: <span class="literal">nil</span>,</span><br><span class="line">  success: &#123; (operation: <span class="type">AFHTTPRequestOperation</span>!,</span><br><span class="line">              responseObject: <span class="type">AnyObject</span>!) <span class="keyword">in</span></span><br><span class="line">      <span class="built_in">println</span>(<span class="string">"JSON: "</span> + responseObject.description)</span><br><span class="line">  &#125;,</span><br><span class="line">  failure: &#123; (operation: <span class="type">AFHTTPRequestOperation</span>!,</span><br><span class="line">              error: <span class="type">NSError</span>!) <span class="keyword">in</span></span><br><span class="line">      <span class="built_in">println</span>(<span class="string">"Error: "</span> + error.localizedDescription)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><p>更详细的<a href="https://github.com/AFNetworking/AFNetworking/wiki/Getting-Started-with-AFNetworking" target="_blank" rel="noopener">在这</a></p>]]></content>
    
    <summary type="html">
    
      在Swift中使用AFNetworking框架
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Swift" scheme="https://blog.qiwihui.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>A small summary, just git something more</title>
    <link href="https://blog.qiwihui.com/2014/11/05/git-something-more/"/>
    <id>https://blog.qiwihui.com/2014/11/05/git-something-more/</id>
    <published>2014-11-05T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.383Z</updated>
    
    <content type="html"><![CDATA[<p>整理自<a href="http://www.cnblogs.com/tugenhua0707/p/4050072.html" target="_blank" rel="noopener">手把手教你用git</a>.<br><a id="more"></a></p><ol><li><code>git reflog</code> 查看历史记录的版本号id</li><li>Discard:<ul><li><code>git reset --hard HEAD^</code></li><li><code>git reset --hard HEAD~100</code></li><li><code>git reset --hard &lt;one commit&gt;</code></li></ul></li><li><code>git checkout -- &lt;file&gt;</code><ul><li>修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。</li><li>另外一种是第一次修改已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。</li></ul></li><li>暂存区 -&gt; 工作区<ul><li><code>git reset HEAD &lt;file&gt;</code></li><li>HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</li></ul></li><li>push<ul><li><code>git remote add origin https://github.com/username/project_name.git</code> 关联一个远程库</li><li><code>git push –u origin master</code> (第一次要用-u, 以后不需要)</li></ul></li><li>分支管理策略: <ul><li>通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息。可以使用带参数 –no-ff来禁用”Fast forward”模式。<code>git merge --no-ff -m &quot;comments&quot; &lt;branch_name&gt;</code></li><li>分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</li></ul></li><li><code>git stash</code>: 可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。<ul><li><code>git stash list</code>: 查看</li><li>恢复：<ol><li><code>git stash apply</code> 恢复，恢复后，stash内容并不删除，你需要使用命令<code>git stash drop</code>来删除。</li><li>另一种方式是使用<code>git stash pop</code>,恢复的同时把stash内容也删除了。</li></ol></li></ul></li><li>多人协作：<ul><li>推送分支：<ol><li>master分支是主分支，因此要时刻与远程同步。</li><li>一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。</li></ol></li><li>抓取分支：<ol><li>push非master分支(e.g. dev)：<code>git checkout  –b dev origin/dev</code>, edit something, <code>git push origin dev</code></li><li>另一个同伴更新：<code>git branch --set-upstream dev origin/dev</code>, <code>git pull</code>, edit something, <code>git push origin dev</code></li></ol></li><li>协作模式：<ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改.</li><li>如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。</li><li>如果合并有冲突，则需要解决冲突，并在本地提交。再用<code>git push origin &lt;branch-name&gt;</code>推送。</li></ol></li></ul></li><li>delete remote branch<ul><li><code>git push origin —delete &lt;branch_name&gt;</code></li></ul></li><li>get remote branch locally<ul><li><code>git branch --set-upstream dev origin/dev</code></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      some small git tips
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Git" scheme="https://blog.qiwihui.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Some markdown tips and Github Flavored Markdown</title>
    <link href="https://blog.qiwihui.com/2014/09/13/markdown-tips-and-GFM/"/>
    <id>https://blog.qiwihui.com/2014/09/13/markdown-tips-and-GFM/</id>
    <published>2014-09-13T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.383Z</updated>
    
    <content type="html"><![CDATA[<p>Refer <a href="https://github.com/qiwihui/qiwihui.github.io/issues/4" target="_blank" rel="noopener">Issue#4</a> to see more details about write markdown code in markdown.<br>markdown: easy-to-write, easy-to-read, plain text format.<br><a id="more"></a></p><h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic:"></a>Basic:</h2><ol><li>Parahraphs: one or more blank lines</li><li><p>Headings:</p> <pre><code> &#35; head1 &#35; &#35;&#35; head2 &#35;&#35; ... &#35;&#35;&#35;&#35;&#35;&#35; head6 &#35;&#35;&#35;&#35;&#35;&#35;</code></pre>or <pre><code> Head1 &#61;&#61;&#61;&#61;&#61;&#61; Head2 &#45;&#45;&#45;&#45;&#45;&#45;</code></pre></li><li><p>Blockquotes:</p> <pre><code>> blockquotes</code></pre></li><li><p>styling text:</p><pre><code>&#42;bold&#42;, &#95;bold&#95;&#42;&#42;italic&#42;&#42;, &#95;&#95;italic&#95;&#95;&#42;&#42;&#95;bold&italic&#95;&#42;&#42;</code></pre></li><li><p>seperated lines: </p> <pre><code> &#42; &#42; &#42; &#42;&#42;&#42; &#42;&#42;&#42;&#42;&#42;&#42; &#45; &#45; &#45; &#45;&#45;&#45;&#45;&#45;&#45;</code></pre></li></ol><h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><ol><li><p>unordered lists: </p> <pre><code>*, -, +</code></pre></li><li><p>ordered list: </p> <pre><code> &#185;.  Bird &#178;.  McHale &#179;.  Parish</code></pre></li><li><p>nested lists</p> <pre><code> &#185;. line1 &#178;. line2   &#42; subline1   &#42; subline1 &#179;. line3</code></pre></li></ol><h2 id="Code-formatting"><a href="#Code-formatting" class="headerlink" title="Code formatting:"></a>Code formatting:</h2><ol><li><p>inline lines:</p> <pre><code>&#96;code&#96;</code></pre></li><li><p>multiple lins:</p> <pre><code> &#96;&#96;&#96; require 'redcarpet' markdown = Redcarpet.new("Hello World!") puts markdown.to_html &#96;&#96;&#96;</code></pre></li></ol><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ol><li><p>basic</p><pre><code>&#91;link_text&#93;&#40;link_url&#41;</code></pre></li><li><p>seperated</p><pre><code>&#91;link_text&#93;&#40;link_id&#41;link_id: link_url "optional_link_title"</code></pre></li><li><p>with optional text</p><pre><code>&#91;link_text&#93;&#40;&#41;links: link_url "optional_link_title"</code></pre></li><li><p>images:</p><pre><code>&#33;&#91;Alt text&#93;&#40;path/to/img.jpg&#41;&#33;&#91;Alt text&#93;&#40;path/to/img "optional_title"&#41;</code></pre></li><li><p>auto links:</p><pre><code> &#60;link&#62;</code></pre></li></ol><h2 id="Special-Character"><a href="#Special-Character" class="headerlink" title="Special Character:"></a>Special Character:</h2><ol><li><p><code>&lt;</code> and <code>&amp;</code>, when they are not in code block, it will transferred to <code>&amp;lt;</code> and <code>&amp;amp;</code></p></li><li><p>need <code>\</code> to display:</p><pre><code>\`*_{}[]()&#35;+&#45;.! </code></pre></li></ol><h1 id="GFM-Github-Flavored-Markdown"><a href="#GFM-Github-Flavored-Markdown" class="headerlink" title="GFM(Github Flavored Markdown)"></a>GFM(Github Flavored Markdown)</h1><ol><li><code>it_is_not_italic</code></li><li>URL autolinking as <code><a href="http://github.com" target="_blank" rel="noopener">http://github.com</a></code> will transfer to <a href="http://github.com" target="_blank" rel="noopener">http://github.com</a></li><li><code>~~strikethrough~~</code> –&gt; <del>strikethrough</del></li><li>Fenced code blocks</li><li><p>Syntax highlighting</p><pre><code>&#96;&#96;&#96;rubyrequire 'redcarpet'markdown = Redcarpet.new("Hello World!")puts markdown.to_html&#96;&#96;&#96; </code></pre></li><li><p>Tables:<br><pre><code>| Left-Aligned  | Center Aligned  | Right Aligned |<br>| :———— |:—————:| —–:|<br>| col 3 is      | some wordy text | $1600 |<br>| col 2 is      | centered        |   $12 |<br>| zebra stripes | are neat        |    $1 |<br></code></pre><br>will become</p></li></ol><table><thead><tr><th style="text-align:left">Left-Aligned</th><th style="text-align:center">Center Aligned</th><th style="text-align:right">Right Aligned</th></tr></thead><tbody><tr><td style="text-align:left">col 3 is</td><td style="text-align:center">some wordy text</td><td style="text-align:right">$1600</td></tr><tr><td style="text-align:left">col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td style="text-align:left">zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      Markdown tips and github flavored markdown
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Markdown" scheme="https://blog.qiwihui.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>没有智能手机的第一天</title>
    <link href="https://blog.qiwihui.com/2014/07/27/first-day-without-smart-phones/"/>
    <id>https://blog.qiwihui.com/2014/07/27/first-day-without-smart-phones/</id>
    <published>2014-07-27T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.383Z</updated>
    
    <content type="html"><![CDATA[<p>在停止博客的一个多月时间里，我除了上班的五天白天，再加上周末出去爬山的两天，<br>剩下的时间很多都花在了我那只智能手机上，微信，QQ，G+，以及一些有节操和没节操<br>的应用和游戏，这一个多月的时间就这样荒芜的度过了。<br><a id="more"></a></p><p>直到我暂停出行的计划，更多<br>地和朋友接触，我才觉得，智能手机在给我带来很大方便的同时，也使得我的生活变得<br>狭窄，交际变得狭隘。于是我决定：离开智能手机一到两个月，就像去年手机坏掉一样。</p><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a><strong>第一天</strong></h2><p>我把手机交给了朋友保管，在微信上和QQ上留下了电话和邮箱，开始了我一个月的非智能<br>生活。第一天是很艰难的，尤其是在突然离开手机之后，我获取信息的方式直接转移到了<br>电脑，这就意味着我要很多时候开着电脑，背单词，阅读文章，收邮件等等都从手机向电<br>脑迁移，无可选择。</p><p>第一天计划的实施还是有点水分的，总是不自觉地拿起那台很古老的手机，打开又关闭，<br>才能继续回来学习工作，然后在iPad上上了一会微信，然后删了微信，整理了所有的不<br>需要的会上瘾的软件，这才算是正式开始了。</p><p>理了头发表决心。</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a><strong>计划</strong></h2><p>在接下来的一两个月的时间里，计划是这样的：</p><ul><li>单词 &gt;100个/天，英文文章&gt;5个/天，有扇贝网站管理。</li><li>linux + python + mysql</li><li>《一个陌生女人的来信》+《Lovely bone》(English) + 《小王子》等</li><li>锻炼： 开始我的为其50周的马拉松训练计划。</li><li>健康管理： 爬，坐，走，跑……</li><li>华山之行（九月份）。</li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a><strong>目标</strong></h2><blockquote><p>尽最大的诚意，但不知道何时会消失，如果可以，就不要<strong>再试一次</strong>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      Without smart phones, what life will be?
    
    </summary>
    
      <category term="生活" scheme="https://blog.qiwihui.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://blog.qiwihui.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Seek, think then speak</title>
    <link href="https://blog.qiwihui.com/2014/06/10/seek-think-speak/"/>
    <id>https://blog.qiwihui.com/2014/06/10/seek-think-speak/</id>
    <published>2014-06-10T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.383Z</updated>
    
    <content type="html"><![CDATA[<p>“Seek, think then speak”，这是我在我的<a href="https://twitter.com/Weihui_Q" target="_blank" rel="noopener">Twitter</a><br>上的签名，也是我在日常生活和工作中一个做事的基本准则。当自己得到一个消息，或者开始一个<br>新的任务的时候，不是下意识地就相信这个消息，开始这个任务，而是要经过这三步过程之后，<br>得出自己的结论，才开始行动。<br><a id="more"></a></p><h2 id="Seek"><a href="#Seek" class="headerlink" title="Seek"></a><strong>Seek</strong></h2><p>探索，或者说是寻求，就是当你得到这个消息的时候，不是盲目地相信，而是先开始收集和甄别资料。<br>在这个信息化一直信息爆炸的时代，越来越多的误导和虚假消息充斥在我们的身边，新闻电视，媒体资讯，<br>社交网络，信息方便的同时也可能是误导和虚假消息滋生的温床。信息本无对错，只是当它们被少数人<br>利用，曲解的时候，信息的对错才开始变得有利可图。</p><h2 id="Think"><a href="#Think" class="headerlink" title="Think"></a><strong>Think</strong></h2><p>思考，结合自己的知识背景和收集到的信息，思考信息的对错，以及其中个所包含的其他有价值的信息，<br>这是一步非常重要的过程。善恶只在一念之间，这一念就是你的思考，你的想法。思考，可以是道理更深刻，<br>事物更透彻，思考的好处不言而喻，古今之集大成者，莫不是善于思考的人。</p><h2 id="Speak"><a href="#Speak" class="headerlink" title="Speak"></a><strong>Speak</strong></h2><p>发言，又或者可以是行动（Move），就是在思考之后表达自己的见解，采取一定的行动支持这个见解，<br>以达到说服自己，说服别人，是别人达成对你的共识，就如同演讲家和行动派表现出来的一样。</p><p>我更喜欢诸如Twitter一类的自由开放社交工具，一个重要的原因是消息的对冲。QQ，微信之类的熟人社交，<br>消息相对封闭，而且熟人会弱化我们对消息的思考，又如微博，却因别有用心的控制儿失去了本来的对冲<br>能力。但这种情况发生的时候， “Seek，think then speak” 就变更加重要了。比如在MH370消失的三四后，<br>微博上开始有人谣传MH370安全返航，微博上很快澄清，儿微信圈和QQ圈就无法及时跟上，seek在这个过程<br>中让我没有轻易相信这这不实的信息。</p><p>Speak, 在这个容易因为言获罪的时期，发言和行动变得愈加重要。沉默是金，那是因为真理，对于非正义，<br>speak才是真理。</p>]]></content>
    
    <summary type="html">
    
      How we deal with daily issues.
    
    </summary>
    
      <category term="生活" scheme="https://blog.qiwihui.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://blog.qiwihui.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>《平凡的世界》与平凡的世界</title>
    <link href="https://blog.qiwihui.com/2014/06/07/the-ordinary-world/"/>
    <id>https://blog.qiwihui.com/2014/06/07/the-ordinary-world/</id>
    <published>2014-06-07T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.383Z</updated>
    
    <content type="html"><![CDATA[<p>我今天要去两个书店淘书，万圣园和蓝羊书坊，便就想起了去年八月读过的小说《平凡的<br>世界》。小说是万学教育的老师推荐的，在刚开始工作的第二个月了就发奋四个星期读完<br>了，时至今日已经过去快一年了，可书中的许多情节依旧历历在目。<br><a id="more"></a></p><h2 id="书中的故事"><a href="#书中的故事" class="headerlink" title="书中的故事"></a><strong>书中的故事</strong></h2><p>《平凡的世界》讲述了以孙少安和孙少平为代表的普通人在大时代历史进程中走过的艰难<br>曲折的道路。时间在上个实际70到80年代，从混乱到改革开放的时期，时代的变革深刻地<br>影响这每一代人的命运。</p><p>哥哥少安一直在家劳动，与村支书田福堂的女儿田润叶青梅竹马，两人互有爱慕之心，却<br>遭到田福堂的反对，经过痛苦的煎熬，少安与山西勤劳的姑娘秀莲结婚，润叶也只能含泪<br>与倾慕她的李向前结婚，改革开放后，机灵的少安看到机会，先是带领生产对实施责任制，<br>后又进城拉砖，用赚的钱办砖窑，成为冒尖户。</p><p>少平原来在县城高中读书，毕业后回乡做了一名老师，但他没有消沉，与县革委副主任田<br>福军女儿田晓霞建立了友情，青春的梦想和追求也激励着他到外面去“闯荡世界”，他从漂<br>泊的揽工汉成为正式的建筑工人，最后又获得了当煤矿工人的好机遇，而田晓霞毕业后也<br>到省城成为了一名记者。在两人产生了强烈的感情时候，田晓霞却因在抗洪采访中为抢救<br>灾民光荣牺牲，少平悲痛不已。后来少平在一次事故中毁容，他没有被不幸压跨，重新回<br>到矿山迎接新的挑战。</p><h2 id="平凡的世界里"><a href="#平凡的世界里" class="headerlink" title="平凡的世界里"></a><strong>平凡的世界里</strong></h2><p>《平凡的世界》是一部很长的小说，但是文字十分流畅，很快就可以带入我们进入这两个<br>在黄土高原上闪亮的两个人的故事。在那个时代变革明显的时代，个人的命运也和时代的<br>命运紧紧地联系在一起，与此同时，个人的追求和梦想也在一步一步地影响这他们的轨迹。<br>少安看准了时代的先机，少平追求不一样的外面世界，这也深深地影响他们的命运和感情。</p><p>他们的感情都有着悲剧性的一面。少安与田润叶，少平与田晓霞，最终没能在一起，甚是<br>惋惜。书中在许多细节上的描写令人感动，比如少平与少安相约两年之后再相见的那段，<br>以及少平在得知田晓霞牺牲之后的感情变化，让人心中为之而动。</p><p>我喜欢书中提到的叶赛宁的一首诗：不惋惜，不呼唤，我也不啼哭……金黄的落叶堆满我心间，<br>我已经不再是青春少年…… </p>]]></content>
    
    <summary type="html">
    
      The Ordinary world is one of Lu Yao s representative.
    
    </summary>
    
      <category term="生活" scheme="https://blog.qiwihui.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="books" scheme="https://blog.qiwihui.com/tags/books/"/>
    
  </entry>
  
  <entry>
    <title>扇贝300天小记:坚持的力量</title>
    <link href="https://blog.qiwihui.com/2014/06/05/reciting-words-for-300-days/"/>
    <id>https://blog.qiwihui.com/2014/06/05/reciting-words-for-300-days/</id>
    <published>2014-06-05T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.383Z</updated>
    
    <content type="html"><![CDATA[<p>到今天，我已经在<a href="http://www.shanbay.com" target="_blank" rel="noopener">扇贝</a>网上完成了300+天的背单词和阅读文章<br>, 单词量虽然不算很多，但是在这过程中的感想还是值得分享的。<br><a id="more"></a></p><p>我喜欢道家之数“三”，道家曰：一生二，二生三，三生万物。天下之事情有三而生，即是<br>刚刚开始，故而在300天左右的时候是很适合分享的。</p><h2 id="起因和坚持的动力"><a href="#起因和坚持的动力" class="headerlink" title="起因和坚持的动力"></a><strong>起因和坚持的动力</strong></h2><p>背单词的最初起因里带有种愤，气愤，大体就是成为前女友眼中的“极品前任”。虽然这<br>在最出的几天很激励，但是这种感觉很快就消失了，之间有一段迷茫期，不知到自己为什么<br>背单词。直到有一天我找到了另一种坚持，一个自己一直想<br>去的地方：Multnomah Falls，这是在美国Oregon这州的一个瀑布，我被她绚丽的落差所折<br>服，有生之年不然是要前往的，虽然觉得去旅游和背单词不是很搭边，没什么联系。</p><p>就是这个，犹如在远方等待着我的少女，让我坚持到了现在：</p><p><img src="/media/files/2014/Jun/06-multnomahfalls.jpg"></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a><strong>方法</strong></h2><p>扇贝网是我知道的为数不多的几个背单词的网站，除了单词，还有新闻文章，书籍，以及一<br>起背单词的小组和论坛，这在一定程度上激励着你一直坚持背下去，小组的作用更加的明显<br>，不打卡就踢人的制度很合适。对单词的单词的理解程度也完全靠自己的自觉。</p><h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a><strong>感受</strong></h2><p>背单词最大的感受是你不能只背单词，只背单词如同嚼蜡，刚开始就会觉得很舒服，没有营<br>养又损害身体，带来的效果也很小。单词背的同时结合着文章的阅读效果是很明显的，以前<br>老师常说的在语境中理解单词的含义单体就是这个意思。其次是要让自己处在一种英语的氛<br>围中，可以用英语阅读写文章，使用英文和朋友交流，使用英文的办公环境……如此种种<br>，都是很有效果的。再者，别人和自己的经验告诉我：背单词应该是意见很快乐的事情，如<br>果在这个过程过程中觉得很痛苦，那么是应该考虑一下自己的方法了。</p><p>李笑来在《把时间当作朋友中》中提到了背单词的方法：</p><blockquote><p>在背单词的时候，事实上，在做所有类似的必须记住大量信息的工作的时候，一定要想办法<br>由衷地把这件事当成一件快乐的事情来做。</p><p>我的一个朋友曾跟我分享他的做法：当年他终于搞明白要拿到奖学金就得获得GRE高分的时<br>候，背单词量要求吓了一跳。他说，他用两天才说服自己这应该是件快乐的事情。</p><p>一共要搞定20000个单词，而因此可能获得的奖学金是40000美元左右 且连续4年没有失业的<br>可能，那么每个单词就值20元人民币，这还只不过是算了一年的收入而已。</p><p>所以，他终于明白背单词是很快乐的，他每天都强迫自己背下200个单词，每在确定记住了<br>一个单词前面画上一个勾时，他就想象一下刚刚数过一张20元人民币的钞票。每天睡觉的时<br>候总感觉心满意足，因为今天又赚了4000块！</p></blockquote><p>在这样的坚持了300+天以后，我觉得在更多的地方都体会到了一个坚持力量（很鸡汤的一<br>句话），但是确实是，坚持锻炼，或者开始每天/每两天更新一千字博客。</p>]]></content>
    
    <summary type="html">
    
      How to do it and what can it bring to you.
    
    </summary>
    
      <category term="生活" scheme="https://blog.qiwihui.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="英语" scheme="https://blog.qiwihui.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>One small story by Fan Zhang at GMIC 2014</title>
    <link href="https://blog.qiwihui.com/2014/05/09/one-small-story-at-gmic-2014/"/>
    <id>https://blog.qiwihui.com/2014/05/09/one-small-story-at-gmic-2014/</id>
    <published>2014-05-09T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.383Z</updated>
    
    <content type="html"><![CDATA[<p>I attended GMIC 2014 in Beijing at May 5<sup>th</sup> and May 6<sup>th</sup>.<br>GMIC is short for Global Mobile Internet Conference, and it is a really huge conference.<br>I just want to share a small story I heard in the conference.<br><a id="more"></a></p><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a><strong>0x00</strong></h2><p>In WeTalk Stage, one of the 8 stages, Fan Zhang, who is the brain behind<br><a href="http://en.wikipedia.org/wiki/Midi_Music_Festival" target="_blank" rel="noopener">Midi Modern Music Festival</a>, gave us a speech: Listen to the Original Where Music is Eternal.<br>In the speech, he shared us a song named “The Brightest Star in the Sky” of 2013 Shanghai Midi Festival<br>(watch it <a href="https://www.youtube.com/watch?v=Z7qgMJCmAHs" target="_blank" rel="noopener">here</a>), and told us a story about the boy<br>who was singing with tears at 2:31 in the video.</p><iframe width="560" height="315" src="//www.youtube.com/embed/Z7qgMJCmAHs" frameborder="0" allowfullscreen></iframe><p>The boy met his girlfriend when they are student in college,<br>but they got separated after graduation and went back to their own hometown. It was the first time they saw each other<br>after 2 years. When catching this song, the boy couldn’t stop crying with mixed feeling.</p><p>This is what music means that something in your deep heart and express your real feeling, I think.</p><p>I would like to go to Midi festival the next time in Beijing, and listen to this song.</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a><strong>0x01</strong></h2><p><a href="http://smileboxx.blogspot.com/2013/08/escape-plan-brightest-star-in-night-sky.html" target="_blank" rel="noopener">Here</a> is the song<br>“The Brightest Star in the Sky” in English. Hope you like it.</p>]]></content>
    
    <summary type="html">
    
      One small story at GMIC 2014 with song - The Brightest Star in the Sky
    
    </summary>
    
      <category term="生活" scheme="https://blog.qiwihui.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="songs" scheme="https://blog.qiwihui.com/tags/songs/"/>
    
  </entry>
  
  <entry>
    <title>5 centimeters per second, a song or kind of feeling</title>
    <link href="https://blog.qiwihui.com/2014/05/07/Five-centimeters-per-second/"/>
    <id>https://blog.qiwihui.com/2014/05/07/Five-centimeters-per-second/</id>
    <published>2014-05-07T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.383Z</updated>
    
    <content type="html"><![CDATA[<p>I listened to the song <em>One more time, One more chance</em> inadvertently, and it feels good.<br>It reminds me of the movie shared with the same name，a story about distance.<br><a id="more"></a></p><p>If I travel in 5 centimeters per second for ten year,<br>In math, I will get <code>5cm x (10 x 365 + 2~3) x 24 x 24 x 60</code>.<br>But in life, I will see much scenery during the journey.<br>Does cherry really falls at speed of 5 centimeters per second?</p><object width="257" height="33" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" odebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><br>    <param name="wmode" value="transparent"><br>    <param name="src" value="http://www.xiami.com/widget/0_1770814259/singlePlayer.swf"><br>    <param name="invokeurls" value="false"><br>    <embed width="257" height="33" type="application/x-shockwave-flash" src="http://www.xiami.com/widget/0_1770814259/singlePlayer.swf" wmode="transparent" invokeurls="false"><br></object><p>About this song:</p><p><em>One more time, One more chance</em> is a single by Japanese singer Masayoshi Yamazaki<br>that was release on January 22, 1997. It is used as the ending theme song for the 2007 film<br>5 Centimeters Per Second。The Engish version <em>One more time, One more chance</em> is performed by BENI, with the same power.</p><blockquote><p>Singer: BENI<br>Lyrics: 山崎まさよし English: BENI, Yoko Hiji<br>Music: 山崎まさよし</p></blockquote><p>English Lyric:</p><blockquote><p>Tell me how much more do I have to lose<br>Before I can ever forgive myself<br>Do you know how much more pain I must endure<br>Before I can ever see your face again<br>One more time - Tell me why the seasons keep on changing<br>One more time - Missing all the times that we shared as one</p></blockquote><blockquote><p>All those times when we used to argue back and forth<br>I always just let you have it your way<br>What kind of spell did you cast on me<br>I even loved all of your selfish ways<br>One more chance - When I find myself lost in those memories<br>One more chance - I don’t know where to go or where to land</p></blockquote><blockquote><p>It doesn’t matter where I am because<br>I can’t help but look for you everywhere<br>On the station platform, in the alley windows<br>I keep fooling myself thinking I might find you there<br>Never thought I would wish upon a star<br>I just want to be there by your side<br>There’s nothing that I won’t do, I’d give up everything<br>Just to hold you in my arms, one more time</p></blockquote><blockquote><p>If all I wanted was just not to be alone,<br>I should be happy with just anyone<br>But tonight the stars are hanging by a thread,<br>and I can’t lie to myself anymore<br>One more time - Tell me why the seasons keep on changing<br>One more time - Missing all the times that we shared as one</p></blockquote><blockquote><p>It doesn’t matter where I am because<br>Can’t help but look for you everywhere<br>At the intersection, even in my dreams<br>Knowing there is no way you would be there<br>If I could just believe in miracles<br>I would do anything to show you now<br>In the morning light, completely new me<br>I’d tell you what I couldn’t say before,“I love you.”</p></blockquote><blockquote><p>Memories of our summers together ooh<br>Our beating hearts were heard no more</p></blockquote><blockquote><p>It doesn’t matter where I am because<br>Can’t help but look for you everywhere<br>The morning sun rises, city of Sakuragi<br>I keep fooling myself thinking I might find you there<br>Never thought I would wish upon a star<br>I just need you right here by my side<br>There’s nothing that I won’t do, I’d give up everything<br>Just to hold you in my arms, one more time</p></blockquote><blockquote><p>It doesn’t matter where I am because<br>Can’t help but look for a trace of you<br>At every corner store, in the newspaper<br>Knowing there is no way that you would be there<br>If I could just believe in miracles, I would open my heart up once again<br>In the morning light, a completely new me<br>I’d tell you what I couldn’t say before,“I love you.”</p></blockquote><blockquote><p>It doesn’t matter where I am because<br>Can’t help but to search for your smile<br>At the railway crossing, watching the trains pass by<br>Even though there’s no way that you’d be there<br>If I could live my life all over again, I would be with you for all time<br>There’s nothing else in this world I want more than what I had<br>There would never be anything but you that I would ask for</p></blockquote>]]></content>
    
    <summary type="html">
    
      A song from one movie gives a lot.
    
    </summary>
    
      <category term="生活" scheme="https://blog.qiwihui.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="songs" scheme="https://blog.qiwihui.com/tags/songs/"/>
    
  </entry>
  
  <entry>
    <title>One problem at Haidian Book City</title>
    <link href="https://blog.qiwihui.com/2014/04/26/one-problem-at-haidian-book-city/"/>
    <id>https://blog.qiwihui.com/2014/04/26/one-problem-at-haidian-book-city/</id>
    <published>2014-04-26T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.383Z</updated>
    
    <content type="html"><![CDATA[<p>Today, I just came by Haidian Book City as usual at Haidian dist in<br>    Beijing. and I found the problem hung on the wall nearby. It is very<br>    interesting and I want to share it.<br><a id="more"></a></p><h2 id="0x00-Problem"><a href="#0x00-Problem" class="headerlink" title="0x00 Problem"></a><strong>0x00 Problem</strong></h2><p>Here is one picture of it.</p><p><img src="/media/files/2014/Apr/27-problem_at_haidian_book_city.jpg"></p><p>A translation of that:</p><blockquote><p><em>Solve this problem, then it’s your domain:</em><br><em>{3, 13, 1113, 3113,…, the 8<sup>th</sup> number}.angelcrunch.com</em><br><em>(the QR code leads to the below link)</em><br><em><a href="http://www.angelcrunch.com/jiemi" target="_blank" rel="noopener">www.angelcrunch.com/jiemi</a></em></p></blockquote><p>Once you finish it, you will get the second as below:</p><blockquote><p><em>Guess a television series by the following numbers, and you will get an interview.</em><br><em>3113112211322112 / 311311</em></p></blockquote><h2 id="0x01-Solution"><a href="#0x01-Solution" class="headerlink" title="0x01 Solution"></a><strong>0x01 Solution</strong></h2><p>Yes, as you may guess, it is one look-and-say sequence(sequence <a href="http://oeis.org/A006715" target="_blank" rel="noopener">A006715</a> in<br><a href="http://en.wikipedia.org/wiki/On-Line_Encyclopedia_of_Integer_Sequences" target="_blank" rel="noopener">OEIS</a>.</p><p>In the sewuence, each member is genrated from the previous menber by<br>“reading” off the digits in it, counting rhe number of digits in groups of<br>the same digit. For example:</p><ul><li>3 is reading off as “one 3” or 13.</li><li>13 is reading off as “one 1 one 3” or 1113.</li><li>1113 is reading off as “three 1s, then one 3” or 3113.</li><li>and so on.</li></ul><p>If we start with any digit <em>d</em> from 0 to 9 then <em>d</em> will remain<br>indefinitely as the last digit of the sequence. For <em>d</em> different from 1, the<br>sequence starts as follows:</p><p><em>d, 1d, 111d, 311d, 13211d, 111312211d, 31131122211d, …</em></p><p>As example in the following table.</p><p><br>    <table style="margin-right: auto; white-space: nowrap; width: auto;"><br>      <tr style="Text"><br>        <td align="left"><b><i>d</i></b></td><br>        <td align="left"><b>Sloane</b></td><br>        <td align="left"><b>sequence</b></td><br>      </tr><br>      <tr style="Text"><br>        <td align="left">1</td><br>        <td align="left"><a href="http://oeis.org/A005150" target="_blank" rel="noopener">A005150</a></td><br>        <td align="left">1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, …</td><br>      </tr><br>      <tr style="Text"><br>        <td align="left">2</td><br>        <td align="left"><a href="http://oeis.org/A006751" target="_blank" rel="noopener">A006751</a></td><br>        <td align="left">2, 12, 1112, 3112, 132112, 1113122112, 311311222112, …</td><br>      </tr><br>      <tr style="Text"><br>        <td align="left">3</td><br>        <td align="left"><a href="http://oeis.org/A006715" target="_blank" rel="noopener">A006715</a></td><br>        <td align="left">3, 13, 1113, 3113, 132113, 1113122113, 311311222113, …</td><br>      </tr><br>    </table><br></p><p>Here, <em>d</em> equals 3.</p><p>So the first answer is 13211321322113.</p><p>For the second one, you need to know more about the sequence.<br>John Conway studied this sequence and found that the 8<sup>th</sup><br>member and every member after it in the sequence is made up of one or more<br>    of 92 “basic” non-interacting subsequences. The 92 basic subsequence shows<br>    in the following table(from <a href="http://www.pdmi.ras.ru/~lowdimma/topics_nth/conway_blocks.pdf" target="_blank" rel="noopener">here</a>.</p><p>The fouth column in the table says what other<br>    subsequences the given subsequence evolves into. He also show that the<br>    number of the digits in each member of the sequence grows a constant from<br>    one member to the next. If L<ins>n</ins> is the number of the digits in the<br>    n<sup>th</sup> member in the sequence, then L<ins>n+1</ins>/L<ins>n</ins> to<br>      a limitation when n to infinity. It is 1.303577269… , which we call it<br>      as <strong>Conway Constant</strong>.</p><p><br>  <table style="margin-right: auto; white-space: nowrap; width: auto;"><br>      <tbody><br>        <tr><br>          <th>No.</th><br>          <th>Subsequence</th><br>          <th>Length</th><br>          <th>Evolves Into</th><br>        </tr><br>        <tr><br>          <td><strong>1</strong></td><br>          <td>1112</td><br>          <td>4</td><br>          <td>(63)</td><br>        </tr><br>        <tr><br>          <td><strong>2</strong></td><br>          <td>1112133</td><br>          <td>7</td><br>          <td>(64)(62)</td><br>        </tr><br>        <tr><br>          <td><strong>3</strong></td><br>          <td>111213322112</td><br>          <td>12</td><br>          <td>(65)</td><br>        </tr><br>        <tr><br>          <td><strong>4</strong></td><br>          <td>111213322113</td><br>          <td>12</td><br>          <td>(66)</td><br>        </tr><br>        <tr><br>          <td><strong>5</strong></td><br>          <td>1113</td><br>          <td>4</td><br>          <td>(68)</td><br>        </tr><br>        <tr><br>          <td><strong>6</strong></td><br>          <td>11131</td><br>          <td>5</td><br>          <td>(69)</td><br>        </tr><br>        <tr><br>          <td><strong>7</strong></td><br>          <td>111311222112</td><br>          <td>12</td><br>          <td>(84)(55)</td><br>        </tr><br>        <tr><br>          <td><strong>8</strong></td><br>          <td>111312</td><br>          <td>6</td><br>          <td>(70)</td><br>        </tr><br>        <tr><br>          <td><strong>9</strong></td><br>          <td>11131221</td><br>          <td>8</td><br>          <td>(71)</td><br>        </tr><br>        <tr><br>          <td><strong>10</strong></td><br>          <td>1113122112</td><br>          <td>10</td><br>          <td>(76)</td><br>        </tr><br>        <tr><br>          <td><strong>11</strong></td><br>          <td>1113122113</td><br>          <td>10</td><br>          <td>(77)</td><br>        </tr><br>        <tr><br>          <td><strong>12</strong></td><br>          <td>11131221131112</td><br>          <td>14</td><br>          <td>(82)</td><br>        </tr><br>        <tr><br>          <td><strong>13</strong></td><br>          <td>111312211312</td><br>          <td>12</td><br>          <td>(78)</td><br>        </tr><br>        <tr><br>          <td><strong>14</strong></td><br>          <td>11131221131211</td><br>          <td>14</td><br>          <td>(79)</td><br>        </tr><br>        <tr><br>          <td><strong>15</strong></td><br>          <td>111312211312113211</td><br>          <td>18</td><br>          <td>(80)</td><br>        </tr><br>        <tr><br>          <td><strong>16</strong></td><br>          <td>111312211312113221133211322112211213322112</td><br>          <td>42</td><br>          <td>(81)(29)(91)</td><br>        </tr><br>        <tr><br>          <td><strong>17</strong></td><br>          <td>111312211312113221133211322112211213322113</td><br>          <td>42</td><br>          <td>(81)(29)(90)</td><br>        </tr><br>        <tr><br>          <td><strong>18</strong></td><br>          <td>11131221131211322113322112</td><br>          <td>26</td><br>          <td>(81)(30)</td><br>        </tr><br>        <tr><br>          <td><strong>19</strong></td><br>          <td>11131221133112</td><br>          <td>14</td><br>          <td>(75)(29)(92)</td><br>        </tr><br>        <tr><br>          <td><strong>20</strong></td><br>          <td>1113122113322113111221131221</td><br>          <td>28</td><br>          <td>(75)(32)</td><br>        </tr><br>        <tr><br>          <td><strong>21</strong></td><br>          <td>11131221222112</td><br>          <td>14</td><br>          <td>(72)</td><br>        </tr><br>        <tr><br>          <td><strong>22</strong></td><br>          <td>111312212221121123222112</td><br>          <td>24</td><br>          <td>(73)</td><br>        </tr><br>        <tr><br>          <td><strong>23</strong></td><br>          <td>111312212221121123222113</td><br>          <td>24</td><br>          <td>(74)</td><br>        </tr><br>        <tr><br>          <td><strong>24</strong></td><br>          <td>11132</td><br>          <td>5</td><br>          <td>(83)</td><br>        </tr><br>        <tr><br>          <td><strong>25</strong></td><br>          <td>1113222</td><br>          <td>7</td><br>          <td>(86)</td><br>        </tr><br>        <tr><br>          <td><strong>26</strong></td><br>          <td>1113222112</td><br>          <td>10</td><br>          <td>(87)</td><br>        </tr><br>        <tr><br>          <td><strong>27</strong></td><br>          <td>1113222113</td><br>          <td>10</td><br>          <td>(88)</td><br>        </tr><br>        <tr><br>          <td><strong>28</strong></td><br>          <td>11133112</td><br>          <td>8</td><br>          <td>(89)(92)</td><br>        </tr><br>        <tr><br>          <td><strong>29</strong></td><br>          <td>12</td><br>          <td>2</td><br>          <td>(1)</td><br>        </tr><br>        <tr><br>          <td><strong>30</strong></td><br>          <td>123222112</td><br>          <td>9</td><br>          <td>(3)</td><br>        </tr><br>        <tr><br>          <td><strong>31</strong></td><br>          <td>123222113</td><br>          <td>9</td><br>          <td>(4)</td><br>        </tr><br>        <tr><br>          <td><strong>32</strong></td><br>          <td>12322211331222113112211</td><br>          <td>23</td><br>          <td>(2)(61)(29)(85)</td><br>        </tr><br>        <tr><br>          <td><strong>33</strong></td><br>          <td>13</td><br>          <td>2</td><br>          <td>(5)</td><br>        </tr><br>        <tr><br>          <td><strong>34</strong></td><br>          <td>131112</td><br>          <td>6</td><br>          <td>(28)</td><br>        </tr><br>        <tr><br>          <td><strong>35</strong></td><br>          <td>13112221133211322112211213322112</td><br>          <td>32</td><br>          <td>(24)(33)(61)(29)(91)</td><br>        </tr><br>        <tr><br>          <td><strong>36</strong></td><br>          <td>13112221133211322112211213322113</td><br>          <td>32</td><br>          <td>(24)(33)(61)(29)(90)</td><br>        </tr><br>        <tr><br>          <td><strong>37</strong></td><br>          <td>13122112</td><br>          <td>8</td><br>          <td>(7)</td><br>        </tr><br>        <tr><br>          <td><strong>38</strong></td><br>          <td>132</td><br>          <td>3</td><br>          <td>(8)</td><br>        </tr><br>        <tr><br>          <td><strong>39</strong></td><br>          <td>13211</td><br>          <td>5</td><br>          <td>(9)</td><br>        </tr><br>        <tr><br>          <td><strong>40</strong></td><br>          <td>132112</td><br>          <td>6</td><br>          <td>(10)</td><br>        </tr><br>        <tr><br>          <td><strong>41</strong></td><br>          <td>1321122112</td><br>          <td>10</td><br>          <td>(21)</td><br>        </tr><br>        <tr><br>          <td><strong>42</strong></td><br>          <td>132112211213322112</td><br>          <td>18</td><br>          <td>(22)</td><br>        </tr><br>        <tr><br>          <td><strong>43</strong></td><br>          <td>132112211213322113</td><br>          <td>18</td><br>          <td>(23)</td><br>        </tr><br>        <tr><br>          <td><strong>44</strong></td><br>          <td>132113</td><br>          <td>6</td><br>          <td>(11)</td><br>        </tr><br>        <tr><br>          <td><strong>45</strong></td><br>          <td>1321131112</td><br>          <td>10</td><br>          <td>(19)</td><br>        </tr><br>        <tr><br>          <td><strong>46</strong></td><br>          <td>13211312</td><br>          <td>8</td><br>          <td>(12)</td><br>        </tr><br>        <tr><br>          <td><strong>47</strong></td><br>          <td>1321132</td><br>          <td>7</td><br>          <td>(13)</td><br>        </tr><br>        <tr><br>          <td><strong>48</strong></td><br>          <td>13211321</td><br>          <td>8</td><br>          <td>(14)</td><br>        </tr><br>        <tr><br>          <td><strong>49</strong></td><br>          <td>132113212221</td><br>          <td>12</td><br>          <td>(15)</td><br>        </tr><br>        <tr><br>          <td><strong>50</strong></td><br>          <td>13211321222113222112</td><br>          <td>20</td><br>          <td>(18)</td><br>        </tr><br>        <tr><br>          <td><strong>51</strong></td><br>          <td>1321132122211322212221121123222112</td><br>          <td>34</td><br>          <td>(16)</td><br>        </tr><br>        <tr><br>          <td><strong>52</strong></td><br>          <td>1321132122211322212221121123222113</td><br>          <td>34</td><br>          <td>(17)</td><br>        </tr><br>        <tr><br>          <td><strong>53</strong></td><br>          <td>13211322211312113211</td><br>          <td>20</td><br>          <td>(20)</td><br>        </tr><br>        <tr><br>          <td><strong>54</strong></td><br>          <td>1321133112</td><br>          <td>10</td><br>          <td>(6)(61)(29)(92)</td><br>        </tr><br>        <tr><br>          <td><strong>55</strong></td><br>          <td>1322112</td><br>          <td>7</td><br>          <td>(26)</td><br>        </tr><br>        <tr><br>          <td><strong>56</strong></td><br>          <td>1322113</td><br>          <td>7</td><br>          <td>(27)</td><br>        </tr><br>        <tr><br>          <td><strong>57</strong></td><br>          <td>13221133112</td><br>          <td>11</td><br>          <td>(25)(29)(92)</td><br>        </tr><br>        <tr><br>          <td><strong>58</strong></td><br>          <td>1322113312211</td><br>          <td>13</td><br>          <td>(25)(29)(67)</td><br>        </tr><br>        <tr><br>          <td><strong>59</strong></td><br>          <td>132211331222113112211</td><br>          <td>21</td><br>          <td>(25)(29)(85)</td><br>        </tr><br>        <tr><br>          <td><strong>60</strong></td><br>          <td>13221133122211332</td><br>          <td>17</td><br>          <td>(25)(29)(68)(61)(29)(89)</td><br>        </tr><br>        <tr><br>          <td><strong>61</strong></td><br>          <td>22</td><br>          <td>2</td><br>          <td>(61)</td><br>        </tr><br>        <tr><br>          <td><strong>62</strong></td><br>          <td>3</td><br>          <td>1</td><br>          <td>(33)</td><br>        </tr><br>        <tr><br>          <td><strong>63</strong></td><br>          <td>3112</td><br>          <td>4</td><br>          <td>(40)</td><br>        </tr><br>        <tr><br>          <td><strong>64</strong></td><br>          <td>3112112</td><br>          <td>7</td><br>          <td>(41)</td><br>        </tr><br>        <tr><br>          <td><strong>65</strong></td><br>          <td>31121123222112</td><br>          <td>14</td><br>          <td>(42)</td><br>        </tr><br>        <tr><br>          <td><strong>66</strong></td><br>          <td>31121123222113</td><br>          <td>14</td><br>          <td>(43)</td><br>        </tr><br>        <tr><br>          <td><strong>67</strong></td><br>          <td>3112221</td><br>          <td>7</td><br>          <td>(38)(39)</td><br>        </tr><br>        <tr><br>          <td><strong>68</strong></td><br>          <td>3113</td><br>          <td>4</td><br>          <td>(44)</td><br>        </tr><br>        <tr><br>          <td><strong>69</strong></td><br>          <td>311311</td><br>          <td>6</td><br>          <td>(48)</td><br>        </tr><br>        <tr><br>          <td><strong>70</strong></td><br>          <td>31131112</td><br>          <td>8</td><br>          <td>(54)</td><br>        </tr><br>        <tr><br>          <td><strong>71</strong></td><br>          <td>3113112211</td><br>          <td>10</td><br>          <td>(49)</td><br>        </tr><br>        <tr><br>          <td><strong>72</strong></td><br>          <td>3113112211322112</td><br>          <td>16</td><br>          <td>(50)</td><br>        </tr><br>        <tr><br>          <td><strong>73</strong></td><br>          <td>3113112211322112211213322112</td><br>          <td>28</td><br>          <td>(51)</td><br>        </tr><br>        <tr><br>          <td><strong>74</strong></td><br>          <td>3113112211322112211213322113</td><br>          <td>28</td><br>          <td>(52)</td><br>        </tr><br>        <tr><br>          <td><strong>75</strong></td><br>          <td>311311222</td><br>          <td>9</td><br>          <td>(47)(38)</td><br>        </tr><br>        <tr><br>          <td><strong>76</strong></td><br>          <td>311311222112</td><br>          <td>12</td><br>          <td>(47)(55)</td><br>        </tr><br>        <tr><br>          <td><strong>77</strong></td><br>          <td>311311222113</td><br>          <td>12</td><br>          <td>(47)(56)</td><br>        </tr><br>        <tr><br>          <td><strong>78</strong></td><br>          <td>3113112221131112</td><br>          <td>16</td><br>          <td>(47)(57)</td><br>        </tr><br>        <tr><br>          <td><strong>79</strong></td><br>          <td>311311222113111221</td><br>          <td>18</td><br>          <td>(47)(58)</td><br>        </tr><br>        <tr><br>          <td><strong>80</strong></td><br>          <td>311311222113111221131221</td><br>          <td>24</td><br>          <td>(47)(59)</td><br>        </tr><br>        <tr><br>          <td><strong>81</strong></td><br>          <td>31131122211311122113222</td><br>          <td>23</td><br>          <td>(47)(60)</td><br>        </tr><br>        <tr><br>          <td><strong>82</strong></td><br>          <td>3113112221133112</td><br>          <td>16</td><br>          <td>(47)(33)(61)(29)(92)</td><br>        </tr><br>        <tr><br>          <td><strong>83</strong></td><br>          <td>311312</td><br>          <td>6</td><br>          <td>(45)</td><br>        </tr><br>        <tr><br>          <td><strong>84</strong></td><br>          <td>31132</td><br>          <td>5</td><br>          <td>(46)</td><br>        </tr><br>        <tr><br>          <td><strong>85</strong></td><br>          <td>311322113212221</td><br>          <td>15</td><br>          <td>(53)</td><br>        </tr><br>        <tr><br>          <td><strong>86</strong></td><br>          <td>311332</td><br>          <td>6</td><br>          <td>(38)(29)(89)</td><br>        </tr><br>        <tr><br>          <td><strong>87</strong></td><br>          <td>3113322112</td><br>          <td>10</td><br>          <td>(38)(30)</td><br>        </tr><br>        <tr><br>          <td><strong>88</strong></td><br>          <td>3113322113</td><br>          <td>10</td><br>          <td>(38)(31)</td><br>        </tr><br>        <tr><br>          <td><strong>89</strong></td><br>          <td>312</td><br>          <td>3</td><br>          <td>(34)</td><br>        </tr><br>        <tr><br>          <td><strong>90</strong></td><br>          <td>312211322212221121123222113</td><br>          <td>27</td><br>          <td>(36)</td><br>        </tr><br>        <tr><br>          <td><strong>91</strong></td><br>          <td>312211322212221121123222122</td><br>          <td>27</td><br>          <td>(35)</td><br>        </tr><br>        <tr><br>          <td><strong>92</strong></td><br>          <td>32112</td><br>          <td>5</td><br>          <td>(37)</td><br>        </tr><br>      </tbody><br>    </table><br></p><p>Those 92 subsequence is so basic that is constructs every member in the look-and-say<br>    sequence. Just like 92 elements. <a href="http://mathworld.wolfram.com/CosmologicalTheorem.html" target="_blank" rel="noopener">Here</a><br>    gives the periodic table of atoms associated with the look-and-say sequence<br>    as named by Conway(1987). As we can see, 3113112211322112 links to <strong>Br</strong>, and<br>    311311 links to <strong>Ba</strong>.</p><p><strong>Br</strong>eaking <strong>Ba</strong>d. That is the answer.</p><h2 id="0x02-More"><a href="#0x02-More" class="headerlink" title="0x02 More"></a><strong>0x02 More</strong></h2><p>That is perfect from the begining to the end. Many thanks to the problem<br>    maker, and the screenwriters, also every<br>    excellent actors in Breaking Bad.</p>]]></content>
    
    <summary type="html">
    
      One amazing problem at Haidian Book City, about look-and-say sequence
    
    </summary>
    
      <category term="数学" scheme="https://blog.qiwihui.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="look-and-say" scheme="https://blog.qiwihui.com/tags/look-and-say/"/>
    
  </entry>
  
  <entry>
    <title>Hello World! The first of everything</title>
    <link href="https://blog.qiwihui.com/2014/04/24/hello-world/"/>
    <id>https://blog.qiwihui.com/2014/04/24/hello-world/</id>
    <published>2014-04-24T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.383Z</updated>
    
    <content type="html"><![CDATA[<p>Hello world, hello to my new blog! Before the django blog was published, I will be here to blog myself.<br><a id="more"></a></p><p>There is wikipedia page <a href="http://en.wikipedia.org/wiki/List_of_Hello_world_program_examples" target="_blank" rel="noopener">Here</a>, which<br>contains a list of hello-world program examples. Simple or complex, these program is a overview of some<br>of the program languages. Good job!</p><p>List two of them that I work with now:</p><p>Hello-world in C:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, world!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hello-world in Python:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">"Hello, world!"</span></span><br></pre></td></tr></table></figure><p>Just a single line. So amazing! As below says:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> this</span><br><span class="line"></span><br><span class="line">The Zen of Python, by Tim Peters</span><br><span class="line"></span><br><span class="line">Beautiful <span class="keyword">is</span> better than ugly.</span><br><span class="line">Explicit <span class="keyword">is</span> better than implicit.</span><br><span class="line">Simple <span class="keyword">is</span> better than complex.</span><br><span class="line">Complex <span class="keyword">is</span> better than complicated.</span><br><span class="line">Flat <span class="keyword">is</span> better than nested.</span><br><span class="line">Sparse <span class="keyword">is</span> better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line">Special cases aren<span class="string">'t special enough to break the rules.</span></span><br><span class="line"><span class="string">Although practicality beats purity.</span></span><br><span class="line"><span class="string">Errors should never pass silently.</span></span><br><span class="line"><span class="string">Unless explicitly silenced.</span></span><br><span class="line"><span class="string">In the face of ambiguity, refuse the temptation to guess.</span></span><br><span class="line"><span class="string">There should be one-- and preferably only one --obvious way to do it.</span></span><br><span class="line"><span class="string">Although that way may not be obvious at first unless you'</span>re Dutch.</span><br><span class="line">Now <span class="keyword">is</span> better than never.</span><br><span class="line">Although never <span class="keyword">is</span> often better than *right* now.</span><br><span class="line">If the implementation <span class="keyword">is</span> hard to explain, it<span class="string">'s a bad idea.</span></span><br><span class="line"><span class="string">If the implementation is easy to explain, it may be a good idea.</span></span><br><span class="line"><span class="string">Namespaces are one honking great idea -- let'</span>s do more of those!</span><br></pre></td></tr></table></figure><p>Hello to my blog.</p>]]></content>
    
    <summary type="html">
    
      First hello world post.
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://blog.qiwihui.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>A quite simple card game implemented in C language</title>
    <link href="https://blog.qiwihui.com/2014/04/23/a-card-game/"/>
    <id>https://blog.qiwihui.com/2014/04/23/a-card-game/</id>
    <published>2014-04-23T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.383Z</updated>
    
    <content type="html"><![CDATA[<p>Here I am going to implement a game process using python and C. I have no<br>idea about its name in English. I will call it as PDT, the same as the project<br>name.<br><a id="more"></a></p><h2 id="0x00-Description"><a href="#0x00-Description" class="headerlink" title="0x00 Description"></a><strong>0x00 Description</strong></h2><p>In the game, each player will hold half of all cards in disorder, and they<br>will cast one card by turn to compose a list card after card. If the list have two cards<br>with the same number, the player will gain the cards between them. The game<br>ends once one of the players has no cards.</p><h2 id="0x01-Analysis"><a href="#0x01-Analysis" class="headerlink" title="0x01 Analysis"></a><strong>0x01 Analysis</strong></h2><p>As we can see. the game contains two basic data structure: queue and<br>stack. The cards held by the players works like a queue. Cards that first in<br>will fisrt out. (As usual, we will insert the cards we gains to the buttom of<br>the  cards.) So we onstruct bellow Queue type:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> *content;  <span class="comment">// all cards</span></span><br><span class="line">  <span class="keyword">int</span> length; <span class="comment">// the current size of the queue</span></span><br><span class="line">  <span class="keyword">int</span> front;  <span class="comment">// the index of the first card </span></span><br><span class="line">  <span class="keyword">int</span> rear;   <span class="comment">// the index of the last card</span></span><br><span class="line">&#125; Queue;</span><br></pre></td></tr></table></figure><p>We construct five basic method for the queue:</p><blockquote><p>queue_init: create a Queue according to the max number of the cards(52)<br>and return a pointer to the Queue.<br>queue_push: insert an item to the rear of the content.<br>queue_npush: insert more than one items to the rear of the cntent.<br>queue_pop: cast a item from the head of the content.<br>queue_len: the sizes of the content.</p></blockquote><p>And the list works like a stack, as the cards that fist in will be out<br>last. So the structure like below:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> *content;</span><br><span class="line">  <span class="keyword">int</span> top;   <span class="comment">// the index of the top cards</span></span><br><span class="line">  <span class="keyword">int</span> length; <span class="comment">// the current size of the cards</span></span><br><span class="line">&#125; Stack;</span><br></pre></td></tr></table></figure><p>Also we have six basic method for the stack, the two different ones like<br>below:</p><blockquote><p>stack_npop: remove more than one items from the stack.<br>stack_isin: check if one item is in the stack or not.</p></blockquote><p>Then What we need to do is wash the cards and play the game. The<br>array_shuffle method descripe how to wash the cards, in fact, randomly. So we<br>can use</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">srand(time(<span class="literal">NULL</span>));</span><br></pre></td></tr></table></figure><p>as a seed to generate numbers differently.<br>And the while loop in <code>main.c</code> file shows to play the games: if one<br>player cast a card and he can gain series of cards, he will play the next<br>round, otherwise the other player will cast.</p><p>The C source code can be seen in the project: <a href="https://github.com/Qiwihui/PDT" target="_blank" rel="noopener">PDT</a><br>As for python, it is more easy to implete this game since we can get<br>existing queue and stack from the standard librar, or we can easily use list<br>as a replacement. It is what I did.</p><p>The project is here: PDT2(<a href="https://github.com/Qiwihui/PDT2" target="_blank" rel="noopener">https://github.com/Qiwihui/PDT2</a>)</p><h2 id="0x02-Further"><a href="#0x02-Further" class="headerlink" title="0x02 Further"></a><strong>0x02 Further</strong></h2><p>We can finally see the whole process that each player cast and gain cards.<br>But will it end in the last or it maybe stuck at a loop? Any idea, please<br>comment on here.</p>]]></content>
    
    <summary type="html">
    
      A small card game.
    
    </summary>
    
      <category term="技术" scheme="https://blog.qiwihui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C" scheme="https://blog.qiwihui.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Tag cloud in Matlab</title>
    <link href="https://blog.qiwihui.com/2013/12/21/tag-cloud-in-matlab/"/>
    <id>https://blog.qiwihui.com/2013/12/21/tag-cloud-in-matlab/</id>
    <published>2013-12-21T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.383Z</updated>
    
    <content type="html"><![CDATA[<p>Here is a 3D tag cloud demo in Matlab. Actually this can be easily created by using HTML5 canvas. See following:<br><a id="more"></a></p><p><img src="/media/files/2013/Dec/22-tagcloudinhtml5.jpg"></p><p>Then I create it in Matlab.</p><p><img src="/media/files/2013/Dec/22-tagcloudinmatlab.png"></p><p>You can see source <a href="https://github.com/Qwh/3DTagCloud" target="_blank" rel="noopener">here</a>.</p>]]></content>
    
    <summary type="html">
    
      A 3d tag in Matlab language.
    
    </summary>
    
      <category term="数学" scheme="https://blog.qiwihui.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="Matlab" scheme="https://blog.qiwihui.com/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>年度总结 - 过去的2013年</title>
    <link href="https://blog.qiwihui.com/2013/11/29/the-past-one-year-2013/"/>
    <id>https://blog.qiwihui.com/2013/11/29/the-past-one-year-2013/</id>
    <published>2013-11-29T16:00:00.000Z</published>
    <updated>2018-09-06T16:08:21.383Z</updated>
    
    <content type="html"><![CDATA[<p>写在2013年到2014年还有不到一个月的时候, 对我第一年工作的状态有一个简单的描述, 每年都要给自己写一个年终总结。<br><a id="more"></a></p><h3 id="得"><a href="#得" class="headerlink" title="得"></a>得</h3><ul><li>选择了和有共同目标的团队一起调研，奋斗的感觉真好。</li><li>选择了请假写论文，这样我可以学霸一次。</li><li>选择了毕业向喜欢的女生表白，不想彼此错过，虽然很短暂。</li><li>选择了毕业工作，放弃保研，不去考公务员，我不后悔自己的选择，这会是一次milestone。</li><li>选择了在公司附近租房，虽然有些贵，但是不用挤三小时地铁。</li><li>选择了扇贝，收获了一种学习习惯。</li><li>选择了写博客，建个人博客Daozhang.info，写BUCTML网站(inBuilding)，虽然还在构建中。</li><li>选择了贡献开源项目<a href="https://github.com/Qwh" target="_blank" rel="noopener">@github</a>，因为我开始讨厌封闭的W系统。</li><li>现在每天都要看几页书，虽然少，但积累的力量很恐怖，不看不爽说。</li><li>我喜欢吃巧克力，而且是黑巧克力。</li><li>选择了学轮滑，耍蝴蝶刀，因为我喜欢。</li><li>选择了给自己一个KeepStudying梦，我会为之而努力！多谢老姐的泼热水支持。</li><li>感谢一路相伴的大学童鞋，四年的感觉真好，重逢必有时！</li><li>工作团队很喜欢，哈哈！</li></ul><h3 id="失"><a href="#失" class="headerlink" title="失"></a>失</h3><ul><li>因为生病，错过了班级的毕业旅行，再也没有了。</li><li>今年没有去宁波，只能等到明年了，我不是拖延症。</li><li><a href="https://www.facebook.com/weihui.qiu" target="_blank" rel="noopener">Facebook</a>, <a href="https://twitter.com/QiuWeihui1" target="_blank" rel="noopener">Twitter</a>, <a href="https://plus.google.com/+WeihuiQiu/" target="_blank" rel="noopener">G+</a>, QQ, Wechat…分散了我的精力，有社交依赖了。</li><li>没能把Google Glass的购买码送出去，人品。</li><li>我不想扯到关于买房买车的问题。</li></ul>]]></content>
    
    <summary type="html">
    
      A sumary of the last one year of 2013
    
    </summary>
    
      <category term="生活" scheme="https://blog.qiwihui.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="总结" scheme="https://blog.qiwihui.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
